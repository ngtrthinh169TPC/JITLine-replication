Copyright 2014 IBM Corp .

All Rights Reserved .

Licensed under the Apache License , Version 2 . 0 ( the `` License `` ) ; you may
not use this file except in compliance with the License . You may obtain
a copy of the License at

http : / / www . apache . org / licenses / LICENSE - 2 . 0

Unless required by applicable law or agreed to in writing , software
distributed under the License is distributed on an `` AS IS `` BASIS , WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . See the
License for the specific language governing permissions and limitations
under the License .

@ author : Mohammad Banikazemi , IBM Corp
import contextlib
import mock
from oslo . config import cfg
from neutron . agent . linux import ip _ lib
from neutron . plugins . ibm . agent import sdnve _ neutron _ agent
from neutron . tests import base
NOTIFIER = ( ' neutron . plugins . ibm . '
' sdnve _ neutron _ plugin . AgentNotifierApi ' )
class CreateAgentConfigMap ( base . BaseTestCase ) :
def test _ create _ agent _ config _ map _ succeeds ( self ) :
self . assertTrue ( sdnve _ neutron _ agent . create _ agent _ config _ map ( cfg . CONF ) )
def test _ create _ agent _ config _ using _ controller _ ips ( self ) :
self . addCleanup ( cfg . CONF . reset )
cfg . CONF . set _ override ( ' controller _ ips ' ,
[ ' 10 . 10 . 10 . 1 ' , ' 10 . 10 . 10 . 2 ' ] , group = ' SDNVE ' )
cfgmap = sdnve _ neutron _ agent . create _ agent _ config _ map ( cfg . CONF )
self . assertEqual ( cfgmap [ ' controller _ ip ' ] , ' 10 . 10 . 10 . 1 ' )
def test _ create _ agent _ config _ using _ interface _ mappings ( self ) :
self . addCleanup ( cfg . CONF . reset )
cfg . CONF . set _ override ( ' interface _ mappings ' ,
[ ' interface1 : eth1 ' , ' interface2 : eth2 ' ] ,
group = ' SDNVE ' )
cfgmap = sdnve _ neutron _ agent . create _ agent _ config _ map ( cfg . CONF )
self . assertEqual ( cfgmap [ ' interface _ mappings ' ] ,
{ ' interface1 ' : ' eth1 ' , ' interface2 ' : ' eth2 ' } )
class TestSdnveNeutronAgent ( base . BaseTestCase ) :
def setUp ( self ) :
super ( TestSdnveNeutronAgent , self ) . setUp ( )
self . addCleanup ( cfg . CONF . reset )
notifier _ p = mock . patch ( NOTIFIER )
notifier _ cls = notifier _ p . start ( )
self . notifier = mock . Mock ( )
notifier _ cls . return _ value = self . notifier
# Avoid rpc initialization for unit tests
cfg . CONF . set _ override ( ' rpc _ backend ' ,
' neutron . openstack . common . rpc . impl _ fake ' )
cfg . CONF . set _ override ( ' integration _ bridge ' ,
' br _ int ' , group = ' SDNVE ' )
kwargs = sdnve _ neutron _ agent . create _ agent _ config _ map ( cfg . CONF )
class MockFixedIntervalLoopingCall ( object ) :
def _ _ init _ _ ( self , f ) :
self . f = f
def start ( self , interval = 0 ) :
self . f ( )
with contextlib . nested (
mock . patch ( ' neutron . plugins . ibm . agent . sdnve _ neutron _ agent . '
' SdnveNeutronAgent . setup _ integration _ br ' ,
return _ value = mock . Mock ( ) ) ,
mock . patch ( ' neutron . openstack . common . loopingcall . '
' FixedIntervalLoopingCall ' ,
new = MockFixedIntervalLoopingCall ) ) :
self . agent = sdnve _ neutron _ agent . SdnveNeutronAgent ( * * kwargs )
def test _ setup _ physical _ interfaces ( self ) :
with mock . patch . object ( self . agent . int _ br ,
' add _ port ' ) as add _ port _ func :
with mock . patch . object ( ip _ lib ,
' device _ exists ' ,
return _ valxue = True ) :
self . agent . setup _ physical _ interfaces ( { `` interface1 `` : `` eth1 `` } )
add _ port _ func . assert _ called _ once _ with ( ' eth1 ' )
def test _ setup _ physical _ interfaces _ none ( self ) :
with mock . patch . object ( self . agent . int _ br ,
' add _ port ' ) as add _ port _ func :
with mock . patch . object ( ip _ lib ,
' device _ exists ' ,
return _ valxue = True ) :
self . agent . setup _ physical _ interfaces ( { } )
self . assertFalse ( add _ port _ func . called )
def test _ get _ info _ set _ controller ( self ) :
with mock . patch . object ( self . agent . int _ br ,
' run _ vsctl ' ) as run _ vsctl _ func :
kwargs = { }
kwargs [ ' info ' ] = { ' new _ controller ' : ' 10 . 10 . 10 . 1 ' }
self . agent . info _ update ( ' dummy ' , * * kwargs )
run _ vsctl _ func . assert _ called _ one _ with ( [ ' set - controller ' ,
' br _ int ' ,
' tcp : 10 . 10 . 10 . 1 ' ] )
def test _ get _ info ( self ) :
with mock . patch . object ( self . agent . int _ br ,
' run _ vsctl ' ) as run _ vsctl _ func :
kwargs = { }
self . agent . info _ update ( ' dummy ' , * * kwargs )
self . assertFalse ( run _ vsctl _ func . called )
