code_changes = [[{"added_code":["from nova . api . openstack import compute", "from nova . compute import api as compute _ api", "from nova import context", "from nova import db", "from nova import exception", "from nova . network import manager", "from nova . openstack . common import rpc", "from nova . tests . image import fake", "fake . stub _ out _ image _ service ( self . stubs )", "self . stubs . Set ( db , ' instance _ get _ all _ by _ filters ' ,", "self . stubs . Set ( db , ' instance _ get _ by _ uuid ' ,", "self . stubs . Set ( db , ' instance _ get _ all _ by _ project ' ,", "self . stubs . Set ( db , ' instance _ add _ security _ group ' ,", "self . stubs . Set ( db , ' instance _ update _ and _ get _ original ' ,", "self . stubs . Set ( db , ' instance _ get _ by _ uuid ' ,", "self . stubs . Set ( db , ' instance _ get ' ,", "self . stubs . Set ( db , ' instance _ get _ by _ uuid ' , new _ return _ server )", "self . stubs . Set ( db , ' instance _ get _ by _ uuid ' , new _ return _ server )", "self . stubs . Set ( db , ' instance _ get _ by _ uuid ' , return _ server )", "raise exception . InstanceNotFound ( )", "self . stubs . Set ( db , ' instance _ get _ by _ uuid ' , fake _ instance _ get )", "self . stubs . Set ( db , ' instance _ get _ all _ by _ reservation ' ,", "self . stubs . Set ( db , ' instance _ get _ all _ by _ reservation ' ,", "self . stubs . Set ( db , ' instance _ get _ all _ by _ reservation ' ,", "self . stubs . Set ( compute _ api . API , ' get _ all ' , fake _ get _ all )", "self . stubs . Set ( compute _ api . API , ' get _ all ' , fake _ get _ all )", "self . stubs . Set ( db , ' instance _ get _ all _ by _ filters ' ,", "self . stubs . Set ( db , ' instance _ get _ all _ by _ filters ' ,", "self . stubs . Set ( db , ' instance _ get _ all _ by _ filters ' ,", "self . stubs . Set ( db , ' instance _ get _ all _ by _ filters ' ,", "self . stubs . Set ( compute _ api . API , ' get _ all ' , fake _ get _ all )", "self . stubs . Set ( compute _ api . API , ' get _ all ' , fake _ get _ all )", "self . stubs . Set ( compute _ api . API , ' get _ all ' , fake _ get _ all )", "self . stubs . Set ( compute _ api . API , ' get _ all ' , fake _ get _ all )", "self . stubs . Set ( compute _ api . API , ' get _ all ' , fake _ get _ all )", "self . stubs . Set ( compute _ api . API , ' get _ all ' , fake _ get _ all )", "self . stubs . Set ( compute _ api . API , ' get _ all ' , fake _ get _ all )", "self . stubs . Set ( compute _ api . API , ' get _ all ' , fake _ get _ all )", "self . stubs . Set ( compute _ api . API , ' get _ all ' , fake _ get _ all )", "self . stubs . Set ( db , ' instance _ get ' ,", "self . stubs . Set ( db , ' instance _ get ' ,", "self . stubs . Set ( db , ' instance _ get ' ,", "self . stubs . Set ( db , ' instance _ get ' ,", "self . stubs . Set ( db , ' instance _ get ' ,", "self . stubs . Set ( db , ' instance _ get ' ,", "self . stubs . Set ( db , ' instance _ get ' ,", "self . stubs . Set ( db , ' instance _ get ' ,", "self . stubs . Set ( db , ' instance _ get ' ,", "self . stubs . Set ( db , ' instance _ get ' ,", "self . stubs . Set ( db , ' instance _ get ' ,", "self . stubs . Set ( db , ' instance _ update ' , server _ update )", "# self . stubs . Set ( db , ' instance _ get ' ,", "raise exception . InstanceNotFound ( )", "self . stubs . Set ( compute _ api . API , ' get ' , fake _ get )", "raise exception . InstanceNotFound ( )", "self . stubs . Set ( compute _ api . API , ' update ' , fake _ update )", "self . stubs . Set ( db , ' instance _ get _ by _ uuid ' ,", "self . stubs . Set ( db , ' instance _ get _ by _ uuid ' ,", "self . stubs . Set ( db , ' instance _ get _ by _ uuid ' ,", "self . stubs . Set ( db , ' instance _ get _ by _ uuid ' ,", "self . stubs . Set ( compute _ api . API , ' _ get _ image ' ,", "self . stubs . Set ( db , ' instance _ get _ by _ uuid ' ,", "self . stubs . Set ( compute _ api . API , ' _ get _ image ' ,", "self . stubs . Set ( db , ' instance _ get _ by _ uuid ' ,", "self . stubs . Set ( db , ' instance _ get _ by _ uuid ' ,", "self . stubs . Set ( db , ' instance _ get _ all _ by _ filters ' ,", "self . stubs . Set ( db , ' instance _ get _ by _ uuid ' ,", "self . stubs . Set ( db , ' instance _ destroy ' , instance _ destroy _ mock )", "self . stubs . Set ( db , ' instance _ destroy ' , instance _ destroy _ mock )", "self . stubs . Set ( db , ' instance _ get _ by _ uuid ' ,", "self . stubs . Set ( db , ' instance _ destroy ' , instance _ destroy _ mock )", "self . stubs . Set ( db , ' instance _ get _ by _ uuid ' ,", "fake . stub _ out _ image _ service ( self . stubs )", "self . stubs . Set ( db , ' instance _ add _ security _ group ' ,", "self . stubs . Set ( db , ' project _ get _ networks ' ,", "self . stubs . Set ( db , ' instance _ create ' , instance _ create )", "self . stubs . Set ( db , ' instance _ system _ metadata _ update ' ,", "self . stubs . Set ( db , ' instance _ get ' , instance _ get )", "self . stubs . Set ( rpc , ' cast ' , fake _ method )", "self . stubs . Set ( rpc , ' call ' , rpc _ call _ wrapper )", "self . stubs . Set ( db , ' instance _ update _ and _ get _ original ' ,", "self . stubs . Set ( rpc , ' queue _ get _ for ' , queue _ get _ for )", "self . stubs . Set ( manager . VlanManager , ' allocate _ fixed _ ip ' ,", "old _ create = compute _ api . API . create", "self . stubs . Set ( compute _ api . API , ' create ' , create )", "old _ create = compute _ api . API . create", "self . stubs . Set ( compute _ api . API , ' create ' , create )", "old _ create = compute _ api . API . create", "self . stubs . Set ( compute _ api . API , ' create ' , create )", "old _ create = compute _ api . API . create", "self . stubs . Set ( compute _ api . API , ' create ' , create )", "old _ create = compute _ api . API . create", "self . stubs . Set ( compute _ api . API , ' create ' , create )", "old _ create = compute _ api . API . create", "self . stubs . Set ( compute _ api . API , ' create ' , create )", "old _ create = compute _ api . API . create", "self . stubs . Set ( compute _ api . API , ' create ' , create )", "old _ create = compute _ api . API . create", "self . stubs . Set ( compute _ api . API , ' create ' , create )", "old _ create = compute _ api . API . create", "self . stubs . Set ( compute _ api . API , ' create ' , create )", "old _ create = compute _ api . API . create", "self . stubs . Set ( compute _ api . API , ' create ' , create )", "old _ create = compute _ api . API . create", "self . stubs . Set ( db , ' key _ pair _ get ' , key _ pair _ get )", "self . stubs . Set ( compute _ api . API , ' create ' , create )", "old _ create = compute _ api . API . create", "self . stubs . Set ( compute _ api . API , ' create ' , create )", "old _ create = compute _ api . API . create", "self . stubs . Set ( compute _ api . API , ' create ' , create )", "old _ create = compute _ api . API . create", "self . stubs . Set ( compute _ api . API , ' create ' , create )", "old _ create = compute _ api . API . create", "self . stubs . Set ( compute _ api . API , ' create ' , create )", "old _ create = compute _ api . API . create", "self . stubs . Set ( compute _ api . API , ' create ' , create )", "old _ create = compute _ api . API . create", "self . stubs . Set ( compute _ api . API , ' create ' , create )", "old _ create = compute _ api . API . create", "self . stubs . Set ( compute _ api . API , ' create ' , create )", "old _ create = compute _ api . API . create", "self . stubs . Set ( compute _ api . API , ' create ' , create )", "self . stubs . Set ( compute _ api . API ,", "index _ serializer = ips . AddressesTemplate ( )", "show _ serializer = ips . NetworkTemplate ( )", "self . request . context = context . RequestContext ( ' fake ' , ' fake ' )", "self . request . context = context . RequestContext ( ' fake ' , ' fake ' )", "self . request . context = context . get _ admin _ context ( )", "self . request . context = context . get _ admin _ context ( )", "self . app = compute . APIRouter ( )", "self . stubs . Set ( compute _ api . API , ' create ' , fake _ create )", "self . stubs . Set ( compute _ api . API , ' create ' , fake _ update )", ],"removed_code":["import nova . api . openstack . compute", "import nova . compute . api", "import nova . db", "import nova . openstack . common . rpc", "import nova . tests . image . fake", "nova . tests . image . fake . stub _ out _ image _ service ( self . stubs )", "self . stubs . Set ( nova . db , ' instance _ get _ all _ by _ filters ' ,", "self . stubs . Set ( nova . db , ' instance _ get _ by _ uuid ' ,", "self . stubs . Set ( nova . db , ' instance _ get _ all _ by _ project ' ,", "self . stubs . Set ( nova . db , ' instance _ add _ security _ group ' ,", "self . stubs . Set ( nova . db , ' instance _ update _ and _ get _ original ' ,", "self . stubs . Set ( nova . db , ' instance _ get _ by _ uuid ' ,", "self . stubs . Set ( nova . db , ' instance _ get ' ,", "self . stubs . Set ( nova . db , ' instance _ get _ by _ uuid ' , new _ return _ server )", "self . stubs . Set ( nova . db , ' instance _ get _ by _ uuid ' , new _ return _ server )", "self . stubs . Set ( nova . db , ' instance _ get _ by _ uuid ' , return _ server )", "raise nova . exception . InstanceNotFound ( )", "self . stubs . Set ( nova . db , ' instance _ get _ by _ uuid ' , fake _ instance _ get )", "self . stubs . Set ( nova . db , ' instance _ get _ all _ by _ reservation ' ,", "self . stubs . Set ( nova . db , ' instance _ get _ all _ by _ reservation ' ,", "self . stubs . Set ( nova . db , ' instance _ get _ all _ by _ reservation ' ,", "self . stubs . Set ( nova . compute . API , ' get _ all ' , fake _ get _ all )", "self . stubs . Set ( nova . compute . API , ' get _ all ' , fake _ get _ all )", "self . stubs . Set ( nova . db , ' instance _ get _ all _ by _ filters ' ,", "self . stubs . Set ( nova . db , ' instance _ get _ all _ by _ filters ' ,", "self . stubs . Set ( nova . db , ' instance _ get _ all _ by _ filters ' ,", "self . stubs . Set ( nova . db , ' instance _ get _ all _ by _ filters ' ,", "self . stubs . Set ( nova . compute . API , ' get _ all ' , fake _ get _ all )", "self . stubs . Set ( nova . compute . API , ' get _ all ' , fake _ get _ all )", "self . stubs . Set ( nova . compute . API , ' get _ all ' , fake _ get _ all )", "self . stubs . Set ( nova . compute . API , ' get _ all ' , fake _ get _ all )", "self . stubs . Set ( nova . compute . API , ' get _ all ' , fake _ get _ all )", "self . stubs . Set ( nova . compute . API , ' get _ all ' , fake _ get _ all )", "self . stubs . Set ( nova . compute . API , ' get _ all ' , fake _ get _ all )", "self . stubs . Set ( nova . compute . API , ' get _ all ' , fake _ get _ all )", "self . stubs . Set ( nova . compute . API , ' get _ all ' , fake _ get _ all )", "self . stubs . Set ( nova . db , ' instance _ get ' ,", "self . stubs . Set ( nova . db , ' instance _ get ' ,", "self . stubs . Set ( nova . db , ' instance _ get ' ,", "self . stubs . Set ( nova . db , ' instance _ get ' ,", "self . stubs . Set ( nova . db , ' instance _ get ' ,", "self . stubs . Set ( nova . db , ' instance _ get ' ,", "self . stubs . Set ( nova . db , ' instance _ get ' ,", "self . stubs . Set ( nova . db , ' instance _ get ' ,", "self . stubs . Set ( nova . db , ' instance _ get ' ,", "self . stubs . Set ( nova . db , ' instance _ get ' ,", "self . stubs . Set ( nova . db , ' instance _ get ' ,", "self . stubs . Set ( nova . db , ' instance _ update ' , server _ update )", "# self . stubs . Set ( nova . db , ' instance _ get ' ,", "raise nova . exception . InstanceNotFound ( )", "self . stubs . Set ( nova . compute . API , ' get ' , fake _ get )", "raise nova . exception . InstanceNotFound ( )", "self . stubs . Set ( nova . compute . API , ' update ' , fake _ update )", "self . stubs . Set ( nova . db , ' instance _ get _ by _ uuid ' ,", "self . stubs . Set ( nova . db , ' instance _ get _ by _ uuid ' ,", "self . stubs . Set ( nova . db , ' instance _ get _ by _ uuid ' ,", "self . stubs . Set ( nova . db , ' instance _ get _ by _ uuid ' ,", "self . stubs . Set ( nova . compute . api . API , ' _ get _ image ' ,", "self . stubs . Set ( nova . db , ' instance _ get _ by _ uuid ' ,", "self . stubs . Set ( nova . compute . api . API , ' _ get _ image ' ,", "self . stubs . Set ( nova . db , ' instance _ get _ by _ uuid ' ,", "self . stubs . Set ( nova . db , ' instance _ get _ by _ uuid ' ,", "self . stubs . Set ( nova . db , ' instance _ get _ all _ by _ filters ' ,", "self . stubs . Set ( nova . db , ' instance _ get _ by _ uuid ' ,", "self . stubs . Set ( nova . db , ' instance _ destroy ' , instance _ destroy _ mock )", "self . stubs . Set ( nova . db , ' instance _ destroy ' , instance _ destroy _ mock )", "self . stubs . Set ( nova . db , ' instance _ get _ by _ uuid ' ,", "self . stubs . Set ( nova . db , ' instance _ destroy ' , instance _ destroy _ mock )", "self . stubs . Set ( nova . db , ' instance _ get _ by _ uuid ' ,", "nova . tests . image . fake . stub _ out _ image _ service ( self . stubs )", "self . stubs . Set ( nova . db , ' instance _ add _ security _ group ' ,", "self . stubs . Set ( nova . db , ' project _ get _ networks ' ,", "self . stubs . Set ( nova . db , ' instance _ create ' , instance _ create )", "self . stubs . Set ( nova . db , ' instance _ system _ metadata _ update ' ,", "self . stubs . Set ( nova . db , ' instance _ get ' , instance _ get )", "self . stubs . Set ( nova . openstack . common . rpc , ' cast ' , fake _ method )", "self . stubs . Set ( nova . openstack . common . rpc , ' call ' , rpc _ call _ wrapper )", "self . stubs . Set ( nova . db , ' instance _ update _ and _ get _ original ' ,", "self . stubs . Set ( nova . openstack . common . rpc , ' queue _ get _ for ' ,", "queue _ get _ for )", "self . stubs . Set ( nova . network . manager . VlanManager , ' allocate _ fixed _ ip ' ,", "old _ create = nova . compute . api . API . create", "self . stubs . Set ( nova . compute . api . API , ' create ' , create )", "old _ create = nova . compute . api . API . create", "self . stubs . Set ( nova . compute . api . API , ' create ' , create )", "old _ create = nova . compute . api . API . create", "self . stubs . Set ( nova . compute . api . API , ' create ' , create )", "old _ create = nova . compute . api . API . create", "self . stubs . Set ( nova . compute . api . API , ' create ' , create )", "old _ create = nova . compute . api . API . create", "self . stubs . Set ( nova . compute . api . API , ' create ' , create )", "old _ create = nova . compute . api . API . create", "self . stubs . Set ( nova . compute . api . API , ' create ' , create )", "old _ create = nova . compute . api . API . create", "self . stubs . Set ( nova . compute . api . API , ' create ' , create )", "old _ create = nova . compute . api . API . create", "self . stubs . Set ( nova . compute . api . API , ' create ' , create )", "old _ create = nova . compute . api . API . create", "self . stubs . Set ( nova . compute . api . API , ' create ' , create )", "old _ create = nova . compute . api . API . create", "self . stubs . Set ( nova . compute . api . API , ' create ' , create )", "old _ create = nova . compute . api . API . create", "self . stubs . Set ( nova . db , ' key _ pair _ get ' , key _ pair _ get )", "self . stubs . Set ( nova . compute . api . API , ' create ' , create )", "old _ create = nova . compute . api . API . create", "self . stubs . Set ( nova . compute . api . API , ' create ' , create )", "old _ create = nova . compute . api . API . create", "self . stubs . Set ( nova . compute . api . API , ' create ' , create )", "old _ create = nova . compute . api . API . create", "self . stubs . Set ( nova . compute . api . API , ' create ' , create )", "old _ create = nova . compute . api . API . create", "self . stubs . Set ( nova . compute . api . API , ' create ' , create )", "old _ create = nova . compute . api . API . create", "self . stubs . Set ( nova . compute . api . API , ' create ' , create )", "old _ create = nova . compute . api . API . create", "self . stubs . Set ( nova . compute . api . API , ' create ' , create )", "old _ create = nova . compute . api . API . create", "self . stubs . Set ( nova . compute . api . API , ' create ' , create )", "old _ create = nova . compute . api . API . create", "self . stubs . Set ( nova . compute . api . API , ' create ' , create )", "self . stubs . Set ( nova . compute . api . API ,", "index _ serializer = nova . api . openstack . compute . ips . AddressesTemplate ( )", "show _ serializer = nova . api . openstack . compute . ips . NetworkTemplate ( )", "self . request . context = nova . context . RequestContext ( ' fake ' , ' fake ' )", "self . request . context = nova . context . RequestContext ( ' fake ' , ' fake ' )", "self . request . context = nova . context . get _ admin _ context ( )", "self . request . context = nova . context . get _ admin _ context ( )", "self . app = nova . api . openstack . compute . APIRouter ( )", "self . stubs . Set ( nova . compute . api . API , ' create ' , fake _ create )", "self . stubs . Set ( nova . compute . api . API , ' create ' , fake _ update )", ]},],[{"added_code":["session = context . session", "with session . begin ( subtransactions = True ) :", "net = super ( LinuxBridgePluginV2 , self ) . get _ network ( context ,", "id , None )", "return self . _ fields ( net , fields )", "def get _ networks ( self , context , filters = None , fields = None ) :", "session = context . session", "with session . begin ( subtransactions = True ) :", "nets = super ( LinuxBridgePluginV2 , self ) . get _ networks ( context ,", "filters ,", "None )", "for net in nets :", "self . _ extend _ network _ dict _ provider ( context , net )", "self . _ extend _ network _ dict _ l3 ( context , net )", "# TODO ( rkukura ) : Filter on extended provider attributes .", "nets = self . _ filter _ nets _ l3 ( context , nets , filters )", ],"removed_code":["net = super ( LinuxBridgePluginV2 , self ) . get _ network ( context , id , None )", "self . _ extend _ network _ dict _ provider ( context , net )", "self . _ extend _ network _ dict _ l3 ( context , net )", "return self . _ fields ( net , fields )", "def get _ networks ( self , context , filters = None , fields = None ) :", "nets = super ( LinuxBridgePluginV2 , self ) . get _ networks ( context , filters ,", "None )", "for net in nets :", "# TODO ( rkukura ) : Filter on extended provider attributes .", "nets = self . _ filter _ nets _ l3 ( context , nets , filters )", ]},{"added_code":["session = context . session", "with session . begin ( subtransactions = True ) :", "net = super ( OVSQuantumPluginV2 , self ) . get _ network ( context ,", "id , None )", "return self . _ fields ( net , fields )", "def get _ networks ( self , context , filters = None , fields = None ) :", "session = context . session", "with session . begin ( subtransactions = True ) :", "nets = super ( OVSQuantumPluginV2 , self ) . get _ networks ( context ,", "filters ,", "None )", "for net in nets :", "self . _ extend _ network _ dict _ provider ( context , net )", "self . _ extend _ network _ dict _ l3 ( context , net )", "# TODO ( rkukura ) : Filter on extended provider attributes .", "nets = self . _ filter _ nets _ l3 ( context , nets , filters )", ],"removed_code":["net = super ( OVSQuantumPluginV2 , self ) . get _ network ( context , id , None )", "self . _ extend _ network _ dict _ provider ( context , net )", "self . _ extend _ network _ dict _ l3 ( context , net )", "return self . _ fields ( net , fields )", "def get _ networks ( self , context , filters = None , fields = None ) :", "nets = super ( OVSQuantumPluginV2 , self ) . get _ networks ( context , filters ,", "None )", "for net in nets :", "# TODO ( rkukura ) : Filter on extended provider attributes .", "nets = self . _ filter _ nets _ l3 ( context , nets , filters )", ]},],[{"added_code":["self . conductor _ api . compute _ confirm _ resize (", "context , instance , migration _ ref = migration )", ],"removed_code":["self . compute _ api . confirm _ resize ( context , instance ,", "migration _ ref = migration )", ]},{"added_code":["def compute _ confirm _ resize ( self , context , instance , migration _ ref ) :", "return self . _ manager . compute _ confirm _ resize ( context , instance ,", "migration _ ref )", "def compute _ confirm _ resize ( self , context , instance , migration _ ref ) :", "return self . conductor _ rpcapi . compute _ confirm _ resize ( context ,", "instance ,", "migration _ ref )", ],"removed_code":[]},{"added_code":["RPC _ API _ VERSION = ' 1 . 46 '", "def compute _ confirm _ resize ( self , context , instance , migration _ ref ) :", "self . compute _ api . confirm _ resize ( context , instance , migration _ ref )", ],"removed_code":["RPC _ API _ VERSION = ' 1 . 45 '", ]},{"added_code":["1 . 46 - Added compute _ confirm _ resize", "def compute _ confirm _ resize ( self , context , instance , migration _ ref ) :", "instance _ p = jsonutils . to _ primitive ( instance )", "migration _ p = jsonutils . to _ primitive ( migration _ ref )", "msg = self . make _ msg ( ' compute _ confirm _ resize ' , instance = instance _ p ,", "migration _ ref = migration _ p )", "return self . call ( context , msg , version = ' 1 . 46 ' )", ],"removed_code":[]},{"added_code":["self . stubs . Set ( self . compute . conductor _ api , ' compute _ confirm _ resize ' ,", ],"removed_code":["self . stubs . Set ( self . compute . compute _ api , ' confirm _ resize ' ,", ]},{"added_code":["def test _ compute _ confirm _ resize ( self ) :", "self . mox . StubOutWithMock ( self . conductor _ manager . compute _ api ,", "' confirm _ resize ' )", "self . conductor _ manager . compute _ api . confirm _ resize ( self . context ,", "' instance ' ,", "' migration ' )", "self . mox . ReplayAll ( )", "self . conductor . compute _ confirm _ resize ( self . context , ' instance ' ,", "' migration ' )", ],"removed_code":[]},],[{"added_code":["[ sdnve ]", "( ListOpt ) The IP address of one ( or more ) SDN - VE controllers", "Default value is : controller _ ips = 127 . 0 . 0 . 1", "Example : controller _ ips = 127 . 0 . 0 . 1 , 127 . 0 . 0 . 2", "( StrOpt ) The integration bridge for OF based implementation", "The default value for integration _ bridge is None", "Example : integration _ bridge = br - int", "( ListOpt ) The interface mapping connecting the integration", "bridge to external network as a list of physical network names and", "interfaces : < physical _ network _ name > : < interface _ name >", "Example : interface _ mappings = default : eth2", "( BoolOpt ) Used to reset the integration bridge , if exists", "The default value for reset _ bridge is True", "Example : reset _ bridge = False", "( BoolOpt ) Used to set the OVS controller as out - of - band", "The default value for out _ of _ band is True", "Example : out _ of _ band = False", "", "( BoolOpt ) The fake controller for testing purposes", "Default value is : use _ fake _ controller = False", "( StrOpt ) The port number for use with controller", "The default value for the port is 8443", "Example : port = 8443", "( StrOpt ) The userid for use with controller", "The default value for the userid is admin", "Example : userid = sdnve _ user", "( StrOpt ) The password for use with controller", "The default value for the password is admin", "Example : password = sdnve _ password", "", "( StrOpt ) The default type of tenants ( and associated resources )", "Default value for OF is : default _ tenant = OF", "Example : default _ tenant = OVERLAY", "( StrOpt ) The string in tenant description that indicates", "Default value for OF tenants : of _ signature = SDNVE - OF", "( StrOpt ) The string in tenant description that indicates", "Default value for OVERLAY tenants : overlay _ signature = SDNVE - OVERLAY", "[ sdnve _ agent ]", "( IntOpt ) Agent ' s polling interval in seconds", "polling _ interval = 2", "( StrOpt ) What to use for root helper", "The default value : root _ helper = ' sudo '", "( BoolOpt ) Whether to use rpc or not", "The default value : rpc = True", "[ securitygroup ]", "The security group is not supported :", "firewall _ driver = neutron . agent . firewall . NoopFirewallDriver", ],"removed_code":[]},{"added_code":["' neutron . plugins . vmware . plugin . NsxServicePlugin ' ,", "' neutron . plugins . ibm . sdnve _ neutron _ plugin . SdnvePluginV2 ' ,", ],"removed_code":["' neutron . plugins . vmware . plugin . NsxServicePlugin '", ]},{"added_code":["' neutron . plugins . ibm . sdnve _ neutron _ plugin . SdnvePluginV2 ' ,", ],"removed_code":[]},{"added_code":["' neutron . services . loadbalancer . plugin . LoadBalancerPlugin ' ,", "' neutron . plugins . ibm . sdnve _ neutron _ plugin . SdnvePluginV2 ' ,", ],"removed_code":["' neutron . services . loadbalancer . plugin . LoadBalancerPlugin '", ]},{"added_code":["' ibm ' : ' neutron . plugins . ibm . sdnve _ neutron _ plugin . SdnvePluginV2 ' ,", "PLUGINS [ ' ibm ' ] ,", ],"removed_code":[]},{"added_code":["IBM SDN - VE Neutron Plugin", "This plugin implements Neutron v2 APIs .", "For more details on how to use it please refer to the following page :", "http : / / wiki . openstack . org / wiki / IBM - Neutron", ],"removed_code":[]},{"added_code":[],"removed_code":[]},{"added_code":[],"removed_code":[]},{"added_code":["Copyright 2014 IBM Corp .", "", "All Rights Reserved .", "", "Licensed under the Apache License , Version 2 . 0 ( the `` License `` ) ; you may", "not use this file except in compliance with the License . You may obtain", "a copy of the License at", "", "http : / / www . apache . org / licenses / LICENSE - 2 . 0", "", "Unless required by applicable law or agreed to in writing , software", "distributed under the License is distributed on an `` AS IS `` BASIS , WITHOUT", "WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . See the", "License for the specific language governing permissions and limitations", "under the License .", "", "@ author : Mohammad Banikazemi , IBM Corp .", "import socket", "import time", "import eventlet", "from oslo . config import cfg", "from neutron . agent . linux import ip _ lib", "from neutron . agent . linux import ovs _ lib", "from neutron . agent import rpc as agent _ rpc", "from neutron . common import config as logging _ config", "from neutron . common import legacy", "from neutron . common import topics", "from neutron . common import utils as q _ utils", "from neutron import context", "from neutron . openstack . common import log as logging", "from neutron . openstack . common . rpc import dispatcher", "from neutron . plugins . ibm . common import config # noqa", "from neutron . plugins . ibm . common import constants", "LOG = logging . getLogger ( _ _ name _ _ )", "class SdnvePluginApi ( agent _ rpc . PluginApi ) :", "def sdnve _ info ( self , context , info ) :", "return self . call ( context ,", "self . make _ msg ( ' sdnve _ info ' , info = info ) ,", "topic = self . topic )", "class SdnveNeutronAgent ( ) :", "RPC _ API _ VERSION = ' 1 . 1 '", "def _ _ init _ _ ( self , integ _ br , interface _ mappings ,", "info , root _ helper , polling _ interval ,", "controller _ ip , reset _ br , out _ of _ band ) :", "' ' ' The agent initialization .", "Sets the following parameters and sets up the integration", "bridge and physical interfaces if need be .", ": param integ _ br : name of the integration bridge .", ": param interface _ mappings : interfaces to physical networks .", ": param info : local IP address of this hypervisor .", ": param root _ helper : utility to use when running shell cmds .", ": param polling _ interval : interval ( secs ) to poll DB .", ": param controller _ ip : Ip address of SDN - VE controller .", "' ' '", "self . root _ helper = root _ helper", "self . int _ bridge _ name = integ _ br", "self . controller _ ip = controller _ ip", "self . interface _ mappings = interface _ mappings", "self . polling _ interval = polling _ interval", "self . info = info", "self . reset _ br = reset _ br", "self . out _ of _ band = out _ of _ band", "if self . int _ bridge _ name :", "self . int _ br = self . setup _ integration _ br ( integ _ br , reset _ br ,", "out _ of _ band ,", "self . controller _ ip )", "self . setup _ physical _ interfaces ( self . interface _ mappings )", "else :", "self . int _ br = None", "self . setup _ rpc ( )", "def setup _ rpc ( self ) :", "if self . int _ br :", "mac = self . int _ br . get _ local _ port _ mac ( )", "self . agent _ id = ' % s % s ' % ( ' sdnve ' , ( mac . replace ( `` : `` , `` `` ) ) )", "else :", "nameaddr = socket . gethostbyname ( socket . gethostname ( ) )", "self . agent _ id = ' % s % s ' % ( ' sdnve _ ' , ( nameaddr . replace ( `` . `` , `` _ `` ) ) )", "self . topic = topics . AGENT", "self . plugin _ rpc = SdnvePluginApi ( topics . PLUGIN )", "self . state _ rpc = agent _ rpc . PluginReportStateAPI ( topics . PLUGIN )", "self . context = context . get _ admin _ context _ without _ session ( )", "self . dispatcher = self . create _ rpc _ dispatcher ( )", "consumers = [ [ constants . INFO , topics . UPDATE ] ]", "self . connection = agent _ rpc . create _ consumers ( self . dispatcher ,", "self . topic ,", "consumers )", "# Plugin calls the agents through the following", "def info _ update ( self , context , * * kwargs ) :", "LOG . debug ( _ ( `` info _ update received `` ) )", "info = kwargs . get ( ' info ' , { } )", "new _ controller = info . get ( ' new _ controller ' )", "out _ of _ band = info . get ( ' out _ of _ band ' )", "if self . int _ br and new _ controller :", "LOG . debug ( _ ( `` info _ update received . New controller ``", "`` is to be set to : % s `` ) , new _ controller )", "self . int _ br . run _ vsctl ( [ `` set - controller `` ,", "self . int _ bridge _ name ,", "`` tcp : `` + new _ controller ] )", "if out _ of _ band :", "LOG . debug ( _ ( `` info _ update received . New controller ``", "`` is set to be out of band `` ) )", "self . int _ br . set _ db _ attribute ( `` controller `` ,", "self . int _ bridge _ name ,", "`` connection - mode `` ,", "`` out - of - band `` )", "def create _ rpc _ dispatcher ( self ) :", "return dispatcher . RpcDispatcher ( [ self ] )", "def setup _ integration _ br ( self , bridge _ name , reset _ br , out _ of _ band ,", "controller _ ip = None ) :", "' ' ' Sets up the integration bridge .", "Create the bridge and remove all existing flows if reset _ br is True .", "Otherwise , creates the bridge if not already existing .", ": param bridge _ name : the name of the integration bridge .", ": param reset _ br : A boolean to rest the bridge if True .", ": param out _ of _ band : A boolean inidicating controller is out of band .", ": param controller _ ip : IP address to use as the bridge controller .", ": returns : the integration bridge", "' ' '", "int _ br = ovs _ lib . OVSBridge ( bridge _ name , self . root _ helper )", "if reset _ br :", "int _ br . reset _ bridge ( )", "int _ br . remove _ all _ flows ( )", "else :", "int _ br . create ( )", "# set the controller", "if controller _ ip :", "int _ br . run _ vsctl (", "[ `` set - controller `` , bridge _ name , `` tcp : `` + controller _ ip ] )", "if out _ of _ band :", "int _ br . set _ db _ attribute ( `` controller `` , bridge _ name ,", "`` connection - mode `` , `` out - of - band `` )", "return int _ br", "def setup _ physical _ interfaces ( self , interface _ mappings ) :", "' ' ' Sets up the physical network interfaces .", "Link physical interfaces to the integration bridge .", ": param interface _ mappings : map physical net names to interface names .", "' ' '", "for physical _ network , interface in interface _ mappings . iteritems ( ) :", "LOG . info ( _ ( `` Mapping physical network % ( physical _ network ) s to ``", "`` interface % ( interface ) s `` ) ,", "{ ' physical _ network ' : physical _ network ,", "' interface ' : interface } )", "# Connect the physical interface to the bridge", "if not ip _ lib . device _ exists ( interface , self . root _ helper ) :", "LOG . error ( _ ( `` Interface % ( interface ) s for physical network ``", "`` % ( physical _ network ) s does not exist . Agent ``", "`` terminated ! `` ) ,", "{ ' physical _ network ' : physical _ network ,", "' interface ' : interface } )", "raise SystemExit ( 1 )", "self . int _ br . add _ port ( interface )", "def sdnve _ info ( self ) :", "details = self . plugin _ rpc . sdnve _ info (", "self . context ,", "{ ' info ' : self . info } )", "return details", "def rpc _ loop ( self ) :", "while True :", "start = time . time ( )", "LOG . debug ( _ ( `` Agent in the rpc loop . `` ) )", "# sleep till end of polling interval", "elapsed = ( time . time ( ) - start )", "if ( elapsed < self . polling _ interval ) :", "time . sleep ( self . polling _ interval - elapsed )", "else :", "LOG . info ( _ ( `` Loop iteration exceeded interval ``", "`` ( % ( polling _ interval ) s vs . % ( elapsed ) s ) ! `` ) ,", "{ ' polling _ interval ' : self . polling _ interval ,", "' elapsed ' : elapsed } )", "def daemon _ loop ( self ) :", "self . rpc _ loop ( )", "def create _ agent _ config _ map ( config ) :", "interface _ mappings = q _ utils . parse _ mappings (", "config . SDNVE . interface _ mappings )", "controller _ ips = config . SDNVE . controller _ ips", "LOG . info ( _ ( `` Controller IPs : % s `` ) , controller _ ips )", "controller _ ip = controller _ ips [ 0 ]", "return {", "' integ _ br ' : config . SDNVE . integration _ bridge ,", "' interface _ mappings ' : interface _ mappings ,", "' controller _ ip ' : controller _ ip ,", "' info ' : config . SDNVE . info ,", "' root _ helper ' : config . SDNVE _ AGENT . root _ helper ,", "' polling _ interval ' : config . SDNVE _ AGENT . polling _ interval ,", "' reset _ br ' : config . SDNVE . reset _ bridge ,", "' out _ of _ band ' : config . SDNVE . out _ of _ band }", "def main ( ) :", "eventlet . monkey _ patch ( )", "cfg . CONF . register _ opts ( ip _ lib . OPTS )", "cfg . CONF ( project = ' neutron ' )", "logging _ config . setup _ logging ( cfg . CONF )", "legacy . modernize _ quantum _ config ( cfg . CONF )", "try :", "agent _ config = create _ agent _ config _ map ( cfg . CONF )", "except ValueError as e :", "LOG . exception ( _ ( `` % s Agent terminated ! `` ) , e )", "raise SystemExit ( 1 )", "plugin = SdnveNeutronAgent ( * * agent _ config )", "# Start everything .", "LOG . info ( _ ( `` Agent initialized successfully , now running . . . `` ) )", "plugin . daemon _ loop ( )", ],"removed_code":[]},{"added_code":[],"removed_code":[]},{"added_code":["Copyright 2014 IBM Corp .", "", "All Rights Reserved .", "", "Licensed under the Apache License , Version 2 . 0 ( the `` License `` ) ; you may", "not use this file except in compliance with the License . You may obtain", "a copy of the License at", "", "http : / / www . apache . org / licenses / LICENSE - 2 . 0", "", "Unless required by applicable law or agreed to in writing , software", "distributed under the License is distributed on an `` AS IS `` BASIS , WITHOUT", "WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . See the", "License for the specific language governing permissions and limitations", "under the License .", "", "@ author : Mohammad Banikazemi , IBM Corp .", "from oslo . config import cfg", "DEFAULT _ INTERFACE _ MAPPINGS = [ ]", "DEFAULT _ CONTROLLER _ IPS = [ ' 127 . 0 . 0 . 1 ' ]", "sdnve _ opts = [", "cfg . BoolOpt ( ' use _ fake _ controller ' , default = False ,", "help = _ ( `` If set to True uses a fake controller . `` ) ) ,", "cfg . StrOpt ( ' base _ url ' , default = ' / one / nb / v2 / ' ,", "help = _ ( `` Base URL for SDN - VE controller REST API `` ) ) ,", "cfg . ListOpt ( ' controller _ ips ' , default = DEFAULT _ CONTROLLER _ IPS ,", "help = _ ( `` List of IP addresses of SDN - VE controller ( s ) `` ) ) ,", "cfg . StrOpt ( ' info ' , default = ' sdnve _ info _ string ' ,", "help = _ ( `` SDN - VE RPC subject `` ) ) ,", "cfg . StrOpt ( ' port ' , default = ' 8443 ' ,", "help = _ ( `` SDN - VE controller port number `` ) ) ,", "cfg . StrOpt ( ' format ' , default = ' json ' ,", "help = _ ( `` SDN - VE request / response format `` ) ) ,", "cfg . StrOpt ( ' userid ' , default = ' admin ' ,", "help = _ ( `` SDN - VE administrator user id `` ) ) ,", "cfg . StrOpt ( ' password ' , default = ' admin ' ,", "help = _ ( `` SDN - VE administrator password `` ) ) ,", "cfg . StrOpt ( ' integration _ bridge ' , default = None ,", "help = _ ( `` Integration bridge to use `` ) ) ,", "cfg . BoolOpt ( ' reset _ bridge ' , default = True ,", "help = _ ( `` Reset the integration bridge before use `` ) ) ,", "cfg . BoolOpt ( ' out _ of _ band ' , default = True ,", "help = _ ( `` Indicating if controller is out of band or not `` ) ) ,", "cfg . ListOpt ( ' interface _ mappings ' ,", "default = DEFAULT _ INTERFACE _ MAPPINGS ,", "help = _ ( `` List of < physical _ network _ name > : < interface _ name > `` ) ) ,", "cfg . StrOpt ( ' default _ tenant _ type ' , default = ' OF ' ,", "help = _ ( `` Tenant type : OF ( default ) and OVERLAY `` ) ) ,", "cfg . StrOpt ( ' overlay _ signature ' , default = ' SDNVE - OVERLAY ' ,", "help = _ ( `` The string in tenant description that indicates ``", "`` the tenant is a OVERLAY tenant `` ) ) ,", "cfg . StrOpt ( ' of _ signature ' , default = ' SDNVE - OF ' ,", "help = _ ( `` The string in tenant description that indicates ``", "`` the tenant is a OF tenant `` ) ) ,", "]", "sdnve _ agent _ opts = [", "cfg . IntOpt ( ' polling _ interval ' , default = 2 ,", "help = _ ( `` Agent polling interval if necessary `` ) ) ,", "cfg . StrOpt ( ' root _ helper ' , default = ' sudo ' ,", "help = _ ( `` Using root helper `` ) ) ,", "cfg . BoolOpt ( ' rpc ' , default = True ,", "help = _ ( `` Whether using rpc `` ) ) ,", "]", "cfg . CONF . register _ opts ( sdnve _ opts , `` SDNVE `` )", "cfg . CONF . register _ opts ( sdnve _ agent _ opts , `` SDNVE _ AGENT `` )", ],"removed_code":[]},{"added_code":["Copyright 2014 IBM Corp .", "", "All Rights Reserved .", "", "Licensed under the Apache License , Version 2 . 0 ( the `` License `` ) ; you may", "not use this file except in compliance with the License . You may obtain", "a copy of the License at", "", "http : / / www . apache . org / licenses / LICENSE - 2 . 0", "", "Unless required by applicable law or agreed to in writing , software", "distributed under the License is distributed on an `` AS IS `` BASIS , WITHOUT", "WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . See the", "License for the specific language governing permissions and limitations", "under the License .", "", "@ author : Mohammad Banikazemi , IBM Corp .", "import httplib", "Topic for info notifications between the plugin and agent", "INFO = ' info '", "TENANT _ TYPE _ OF = ' OF '", "TENANT _ TYPE _ OVERLAY = ' OVERLAY '", "HTTP _ ACCEPTABLE = [ httplib . OK ,", "httplib . CREATED ,", "httplib . ACCEPTED ,", "httplib . NO _ CONTENT", "]", ],"removed_code":[]},{"added_code":["Copyright 2014 IBM Corp .", "", "All Rights Reserved .", "", "Licensed under the Apache License , Version 2 . 0 ( the `` License `` ) ; you may", "not use this file except in compliance with the License . You may obtain", "a copy of the License at", "", "http : / / www . apache . org / licenses / LICENSE - 2 . 0", "", "Unless required by applicable law or agreed to in writing , software", "distributed under the License is distributed on an `` AS IS `` BASIS , WITHOUT", "WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . See the", "License for the specific language governing permissions and limitations", "under the License .", "", "@ author : Mohammad Banikazemi , IBM Corp .", "from neutron . common import exceptions", "class SdnveException ( exceptions . NeutronException ) :", "message = _ ( `` An unexpected error occurred in the SDN - VE Plugin . ``", "`` Here is the error message : % ( msg ) s `` )", "class BadInputException ( exceptions . BadRequest ) :", "message = _ ( `` The input does not contain nececessary info : % ( msg ) s `` )", ],"removed_code":[]},{"added_code":["Copyright 2014 IBM Corp .", "", "All Rights Reserved .", "", "Licensed under the Apache License , Version 2 . 0 ( the `` License `` ) ; you may", "not use this file except in compliance with the License . You may obtain", "a copy of the License at", "", "http : / / www . apache . org / licenses / LICENSE - 2 . 0", "", "Unless required by applicable law or agreed to in writing , software", "distributed under the License is distributed on an `` AS IS `` BASIS , WITHOUT", "WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . See the", "License for the specific language governing permissions and limitations", "under the License .", "", "@ author : Mohammad Banikazemi , IBM Corp .", "import httplib", "import urllib", "import httplib2", "from keystoneclient . v2 _ 0 import client as keyclient", "from oslo . config import cfg", "from neutron . api . v2 import attributes", "from neutron . openstack . common import log as logging", "from neutron . plugins . ibm . common import config # noqa", "from neutron . plugins . ibm . common import constants", "from neutron . wsgi import Serializer", "LOG = logging . getLogger ( _ _ name _ _ )", "SDNVE _ VERSION = ' 2 . 0 '", "SDNVE _ ACTION _ PREFIX = ' / sdnve '", "SDNVE _ RETRIES = 0", "SDNVE _ RETRIY _ INTERVAL = 1", "SDNVE _ TENANT _ TYPE _ OVERLAY = u ' DOVE '", "SDNVE _ URL = ' https : / / % s : % s % s '", "class RequestHandler ( object ) :", "' ' ' Handles processeing requests to and responses from controller . ' ' '", "def _ _ init _ _ ( self , controller _ ips = None , port = None , ssl = None ,", "base _ url = None , userid = None , password = None ,", "timeout = 10 , formats = None ) :", "' ' ' Initializes the RequestHandler for communication with controller", "Following keyword arguments are used ; if not specified , default", "values are used .", ": param port : Username for authentication .", ": param timeout : Time out for http requests .", ": param userid : User id for accessing controller .", ": param password : Password for accessing the controlelr .", ": param base _ url : The base url for the controller .", ": param controller _ ips : List of controller IP addresses .", ": param formats : Supported formats .", "' ' '", "self . port = port or cfg . CONF . SDNVE . port", "self . timeout = timeout", "self . _ s _ meta = None", "self . connection = None", "self . httpclient = httplib2 . Http (", "disable _ ssl _ certificate _ validation = True )", "self . cookie = None", "userid = userid or cfg . CONF . SDNVE . userid", "password = password or cfg . CONF . SDNVE . password", "if ( userid and password ) :", "self . httpclient . add _ credentials ( userid , password )", "self . base _ url = base _ url or cfg . CONF . SDNVE . base _ url", "self . controller _ ips = controller _ ips or cfg . CONF . SDNVE . controller _ ips", "LOG . info ( _ ( `` The IP addr of available SDN - VE controllers : % s `` ) ,", "self . controller _ ips )", "self . controller _ ip = self . controller _ ips [ 0 ]", "LOG . info ( _ ( `` The SDN - VE controller IP address : % s `` ) ,", "self . controller _ ip )", "self . new _ controller = False", "self . format = formats or cfg . CONF . SDNVE . format", "self . version = SDNVE _ VERSION", "self . action _ prefix = SDNVE _ ACTION _ PREFIX", "self . retries = SDNVE _ RETRIES", "self . retry _ interval = SDNVE _ RETRIY _ INTERVAL", "def serialize ( self , data ) :", "' ' ' Serializes a dictionary with a single key . ' ' '", "if isinstance ( data , dict ) :", "return Serializer ( ) . serialize ( data , self . content _ type ( ) )", "elif data :", "raise TypeError ( _ ( `` unable to serialize object type : ' % s ' `` ) %", "type ( data ) )", "def deserialize ( self , data , status _ code ) :", "' ' ' Deserializes an xml or json string into a dictionary . ' ' '", "# NOTE ( mb ) : Temporary fix for backend controller requirement", "data = data . replace ( `` router _ external `` , `` router : external `` )", "if status _ code = = httplib . NO _ CONTENT :", "return data", "try :", "deserialized _ data = Serializer (", "metadata = self . _ s _ meta ) . deserialize ( data , self . content _ type ( ) )", "deserialized _ data = deserialized _ data [ ' body ' ]", "except Exception :", "deserialized _ data = data", "return deserialized _ data", "def content _ type ( self , format = None ) :", "' ' ' Returns the mime - type for either ' xml ' or ' json ' . ' ' '", "return ' application / % s ' % ( format or self . format )", "def delete ( self , url , body = None , headers = None , params = None ) :", "return self . do _ request ( `` DELETE `` , url , body = body ,", "headers = headers , params = params )", "def get ( self , url , body = None , headers = None , params = None ) :", "return self . do _ request ( `` GET `` , url , body = body ,", "headers = headers , params = params )", "def post ( self , url , body = None , headers = None , params = None ) :", "return self . do _ request ( `` POST `` , url , body = body ,", "headers = headers , params = params )", "def put ( self , url , body = None , headers = None , params = None ) :", "return self . do _ request ( `` PUT `` , url , body = body ,", "headers = headers , params = params )", "def do _ request ( self , method , url , body = None , headers = None ,", "params = None , connection _ type = None ) :", "status _ code = - 1", "replybody _ deserialized = ' '", "if body :", "body = self . serialize ( body )", "self . headers = headers or { ' Content - Type ' : self . content _ type ( ) }", "if self . cookie :", "self . headers [ ' cookie ' ] = self . cookie", "if self . controller _ ip ! = self . controller _ ips [ 0 ] :", "controllers = [ self . controller _ ip ]", "else :", "controllers = [ ]", "controllers . extend ( self . controller _ ips )", "for controller _ ip in controllers :", "serverurl = SDNVE _ URL % ( controller _ ip , self . port , self . base _ url )", "myurl = serverurl + url", "if params and isinstance ( params , dict ) :", "myurl + = ' ? ' + urllib . urlencode ( params , doseq = 1 )", "try :", "LOG . debug ( _ ( `` Sending request to SDN - VE . url : ``", "`` % ( myurl ) s method : % ( method ) s body : ``", "`` % ( body ) s header : % ( header ) s `` ) ,", "{ ' myurl ' : myurl , ' method ' : method ,", "' body ' : body , ' header ' : self . headers } )", "resp , replybody = self . httpclient . request (", "myurl , method = method , body = body , headers = self . headers )", "LOG . debug ( ( `` Response recd from SDN - VE . resp : % ( resp ) s ``", "`` body : % ( body ) s `` ) ,", "{ ' resp ' : resp . status , ' body ' : replybody } )", "status _ code = resp . status", "except Exception as e :", "LOG . error ( _ ( `` Error : Could not reach server : % ( url ) s ``", "`` Exception : % ( excp ) s . `` ) ,", "{ ' url ' : myurl , ' excp ' : e } )", "self . cookie = None", "continue", "if status _ code not in constants . HTTP _ ACCEPTABLE :", "LOG . debug ( _ ( `` Error message : % ( reply ) s - - Status : % ( status ) s `` ) ,", "{ ' reply ' : replybody , ' status ' : status _ code } )", "else :", "LOG . debug ( _ ( `` Received response status : % s `` ) , status _ code )", "if resp . get ( ' set - cookie ' ) :", "self . cookie = resp [ ' set - cookie ' ]", "replybody _ deserialized = self . deserialize (", "replybody ,", "status _ code )", "LOG . debug ( _ ( `` Deserialized body : % s `` ) , replybody _ deserialized )", "if controller _ ip ! = self . controller _ ip :", "# bcast the change of controller", "self . new _ controller = True", "self . controller _ ip = controller _ ip", "return ( status _ code , replybody _ deserialized )", "return ( httplib . REQUEST _ TIMEOUT , ' Could not reach server ( s ) ' )", "class Client ( RequestHandler ) :", "' ' ' Client for SDNVE controller . ' ' '", "def _ _ init _ _ ( self ) :", "' ' ' Initialize a new SDNVE client . ' ' '", "super ( Client , self ) . _ _ init _ _ ( )", "self . keystoneclient = KeystoneClient ( )", "resource _ path = {", "' network ' : `` ln / networks / `` ,", "' subnet ' : `` ln / subnets / `` ,", "' port ' : `` ln / ports / `` ,", "' tenant ' : `` ln / tenants / `` ,", "' router ' : `` ln / routers / `` ,", "' floatingip ' : `` ln / floatingips / `` ,", "}", "def process _ request ( self , body ) :", "' ' ' Processes requests according to requirements of controller . ' ' '", "if self . format = = ' json ' :", "body = dict (", "( k . replace ( ' : ' , ' _ ' ) , v ) for k , v in body . items ( )", "if attributes . is _ attr _ set ( v ) )", "def sdnve _ list ( self , resource , * * params ) :", "' ' ' Fetches a list of resources . ' ' '", "res = self . resource _ path . get ( resource , None )", "if not res :", "LOG . info ( _ ( `` Bad resource for forming a list request `` ) )", "return 0 , ' '", "return self . get ( res , params = params )", "def sdnve _ show ( self , resource , specific , * * params ) :", "' ' ' Fetches information of a certain resource . ' ' '", "res = self . resource _ path . get ( resource , None )", "if not res :", "LOG . info ( _ ( `` Bad resource for forming a show request `` ) )", "return 0 , ' '", "return self . get ( res + specific , params = params )", "def sdnve _ create ( self , resource , body ) :", "' ' ' Creates a new resource . ' ' '", "res = self . resource _ path . get ( resource , None )", "if not res :", "LOG . info ( _ ( `` Bad resource for forming a create request `` ) )", "return 0 , ' '", "self . process _ request ( body )", "status , data = self . post ( res , body = body )", "return ( status , data )", "def sdnve _ update ( self , resource , specific , body = None ) :", "' ' ' Updates a resource . ' ' '", "res = self . resource _ path . get ( resource , None )", "if not res :", "LOG . info ( _ ( `` Bad resource for forming a update request `` ) )", "return 0 , ' '", "self . process _ request ( body )", "return self . put ( res + specific , body = body )", "def sdnve _ delete ( self , resource , specific ) :", "' ' ' Deletes the specified resource . ' ' '", "res = self . resource _ path . get ( resource , None )", "if not res :", "LOG . info ( _ ( `` Bad resource for forming a delete request `` ) )", "return 0 , ' '", "return self . delete ( res + specific )", "def _ tenant _ id _ conversion ( self , osid ) :", "return osid", "def sdnve _ get _ tenant _ byid ( self , os _ tenant _ id ) :", "sdnve _ tenant _ id = self . _ tenant _ id _ conversion ( os _ tenant _ id )", "resp , content = self . sdnve _ show ( ' tenant ' , sdnve _ tenant _ id )", "if resp in constants . HTTP _ ACCEPTABLE :", "tenant _ id = content . get ( ' id ' )", "tenant _ type = content . get ( ' network _ type ' )", "if tenant _ type = = SDNVE _ TENANT _ TYPE _ OVERLAY :", "tenant _ type = constants . TENANT _ TYPE _ OVERLAY", "return tenant _ id , tenant _ type", "return None , None", "def sdnve _ check _ and _ create _ tenant ( self , os _ tenant _ id , network _ type = None ) :", "if not os _ tenant _ id :", "return", "tenant _ id , tenant _ type = self . sdnve _ get _ tenant _ byid ( os _ tenant _ id )", "if tenant _ id :", "if not network _ type :", "return tenant _ id", "if tenant _ type ! = network _ type :", "LOG . info ( _ ( `` Non matching tenant and network types : ``", "`` % ( ttype ) s % ( ntype ) s `` ) ,", "{ ' ttype ' : tenant _ type , ' ntype ' : network _ type } )", "return", "return tenant _ id", "# Have to create a new tenant", "sdnve _ tenant _ id = self . _ tenant _ id _ conversion ( os _ tenant _ id )", "if not network _ type :", "network _ type = self . keystoneclient . get _ tenant _ type ( os _ tenant _ id )", "if network _ type = = constants . TENANT _ TYPE _ OVERLAY :", "network _ type = SDNVE _ TENANT _ TYPE _ OVERLAY", "pinn _ desc = ( `` Created by SDN - VE Neutron Plugin , OS project name = `` +", "self . keystoneclient . get _ tenant _ name ( os _ tenant _ id ) )", "res , content = self . sdnve _ create ( ' tenant ' ,", "{ ' id ' : sdnve _ tenant _ id ,", "' name ' : os _ tenant _ id ,", "' network _ type ' : network _ type ,", "' description ' : pinn _ desc } )", "if res not in constants . HTTP _ ACCEPTABLE :", "return", "return sdnve _ tenant _ id", "def sdnve _ get _ controller ( self ) :", "if self . new _ controller :", "self . new _ controller = False", "return self . controller _ ip", "class KeystoneClient ( object ) :", "def _ _ init _ _ ( self , username = None , tenant _ name = None , password = None ,", "auth _ url = None ) :", "keystone _ conf = cfg . CONF . keystone _ authtoken", "keystone _ auth _ url = ( ' % s : / / % s : % s / v2 . 0 / ' %", "( keystone _ conf . auth _ protocol ,", "keystone _ conf . auth _ host ,", "keystone _ conf . auth _ port ) )", "username = username or keystone _ conf . admin _ user", "tenant _ name = tenant _ name or keystone _ conf . admin _ tenant _ name", "password = password or keystone _ conf . admin _ password", "auth _ url = auth _ url or keystone _ auth _ url", "self . overlay _ signature = cfg . CONF . SDNVE . overlay _ signature", "self . of _ signature = cfg . CONF . SDNVE . of _ signature", "self . default _ tenant _ type = cfg . CONF . SDNVE . default _ tenant _ type", "self . client = keyclient . Client ( username = username ,", "password = password ,", "tenant _ name = tenant _ name ,", "auth _ url = auth _ url )", "def get _ tenant _ byid ( self , id ) :", "try :", "return self . client . tenants . get ( id )", "except Exception :", "LOG . exception ( _ ( `` Did not find tenant : % r `` ) , id )", "def get _ tenant _ type ( self , id ) :", "tenant = self . get _ tenant _ byid ( id )", "if tenant :", "description = tenant . description", "if description :", "if ( description . find ( self . overlay _ signature ) > = 0 ) :", "return constants . TENANT _ TYPE _ OVERLAY", "if ( description . find ( self . of _ signature ) > = 0 ) :", "return constants . TENANT _ TYPE _ OF", "return self . default _ tenant _ type", "def get _ tenant _ name ( self , id ) :", "tenant = self . get _ tenant _ byid ( id )", "if tenant :", "return tenant . name", "return ' not found '", ],"removed_code":[]},{"added_code":["Copyright 2014 IBM Corp .", "", "All Rights Reserved .", "", "Licensed under the Apache License , Version 2 . 0 ( the `` License `` ) ; you may", "not use this file except in compliance with the License . You may obtain", "a copy of the License at", "", "http : / / www . apache . org / licenses / LICENSE - 2 . 0", "", "Unless required by applicable law or agreed to in writing , software", "distributed under the License is distributed on an `` AS IS `` BASIS , WITHOUT", "WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . See the", "License for the specific language governing permissions and limitations", "under the License .", "", "@ author : Mohammad Banikazemi , IBM Corp .", "from neutron . openstack . common import log as logging", "from neutron . plugins . ibm . common import constants", "LOG = logging . getLogger ( _ _ name _ _ )", "HTTP _ OK = 200", "class FakeClient ( ) :", "' ' ' Fake Client for SDNVE controller . ' ' '", "def _ _ init _ _ ( self , * * kwargs ) :", "LOG . info ( _ ( ' Fake SDNVE controller initialized ' ) )", "def sdnve _ list ( self , resource , * * _ params ) :", "LOG . info ( _ ( ' Fake SDNVE controller : list ' ) )", "return ( HTTP _ OK , None )", "def sdnve _ show ( self , resource , specific , * * _ params ) :", "LOG . info ( _ ( ' Fake SDNVE controller : show ' ) )", "return ( HTTP _ OK , None )", "def sdnve _ create ( self , resource , body ) :", "LOG . info ( _ ( ' Fake SDNVE controller : create ' ) )", "return ( HTTP _ OK , None )", "def sdnve _ update ( self , resource , specific , body = None ) :", "LOG . info ( _ ( ' Fake SDNVE controller : update ' ) )", "return ( HTTP _ OK , None )", "def sdnve _ delete ( self , resource , specific ) :", "LOG . info ( _ ( ' Fake SDNVE controller : delete ' ) )", "return ( HTTP _ OK , None )", "def sdnve _ get _ tenant _ byid ( self , id ) :", "LOG . info ( _ ( ' Fake SDNVE controller : get tenant by id ' ) )", "return id , constants . TENANT _ TYPE _ OF", "def sdnve _ check _ and _ create _ tenant ( self , id , network _ type = None ) :", "LOG . info ( _ ( ' Fake SDNVE controller : check and create tenant ' ) )", "return id", "def sdnve _ get _ controller ( self ) :", "LOG . info ( _ ( ' Fake SDNVE controller : get controller ' ) )", "return None", ],"removed_code":[]},{"added_code":["Copyright 2014 IBM Corp .", "", "All Rights Reserved .", "", "Licensed under the Apache License , Version 2 . 0 ( the `` License `` ) ; you may", "not use this file except in compliance with the License . You may obtain", "a copy of the License at", "", "http : / / www . apache . org / licenses / LICENSE - 2 . 0", "", "Unless required by applicable law or agreed to in writing , software", "distributed under the License is distributed on an `` AS IS `` BASIS , WITHOUT", "WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . See the", "License for the specific language governing permissions and limitations", "under the License .", "", "@ author : Mohammad Banikazemi , IBM Corp .", "import functools", "from oslo . config import cfg", "from neutron . common import constants as q _ const", "from neutron . common import exceptions as q _ exc", "from neutron . common import rpc as q _ rpc", "from neutron . common import topics", "from neutron . db import agents _ db", "from neutron . db import db _ base _ plugin _ v2", "from neutron . db import external _ net _ db", "from neutron . db import l3 _ gwmode _ db", "from neutron . db import portbindings _ db", "from neutron . extensions import portbindings", "from neutron . openstack . common import excutils", "from neutron . openstack . common import log as logging", "from neutron . openstack . common import rpc", "from neutron . openstack . common . rpc import proxy", "from neutron . plugins . ibm . common import config # noqa", "from neutron . plugins . ibm . common import constants", "from neutron . plugins . ibm . common import exceptions as sdnve _ exc", "from neutron . plugins . ibm import sdnve _ api as sdnve", "from neutron . plugins . ibm import sdnve _ api _ fake as sdnve _ fake", "LOG = logging . getLogger ( _ _ name _ _ )", "class SdnveRpcCallbacks ( ) :", "def _ _ init _ _ ( self , notifier ) :", "self . notifier = notifier # used to notify the agent", "def create _ rpc _ dispatcher ( self ) :", "' ' ' Get the rpc dispatcher for this manager .", "If a manager would like to set an rpc API version , or support more than", "one class as the target of rpc messages , override this method .", "' ' '", "return q _ rpc . PluginRpcDispatcher ( [ self ,", "agents _ db . AgentExtRpcCallback ( ) ] )", "def sdnve _ info ( self , rpc _ context , * * kwargs ) :", "' ' ' Update new information . ' ' '", "info = kwargs . get ( ' info ' )", "# Notify all other listening agents", "self . notifier . info _ update ( rpc _ context , info )", "return info", "class AgentNotifierApi ( proxy . RpcProxy ) :", "' ' ' Agent side of the SDN - VE rpc API . ' ' '", "BASE _ RPC _ API _ VERSION = ' 1 . 0 '", "def _ _ init _ _ ( self , topic ) :", "super ( AgentNotifierApi , self ) . _ _ init _ _ (", "topic = topic , default _ version = self . BASE _ RPC _ API _ VERSION )", "self . topic _ info _ update = topics . get _ topic _ name ( topic ,", "constants . INFO ,", "topics . UPDATE )", "def info _ update ( self , context , info ) :", "self . fanout _ cast ( context ,", "self . make _ msg ( ' info _ update ' ,", "info = info ) ,", "topic = self . topic _ info _ update )", "def _ ha ( func ) :", "' ' ' Supports the high availability feature of the controller . ' ' '", "@ functools . wraps ( func )", "def hawrapper ( self , * args , * * kwargs ) :", "' ' ' This wrapper sets the new controller if necessary", "When a controller is detected to be not responding , and a", "new controller is chosen to be used in its place , this decorator", "makes sure the existing integration bridges are set to point", "to the new controleer by calling the set _ controller method .", "' ' '", "ret _ func = func ( self , * args , * * kwargs )", "self . set _ controller ( args [ 0 ] )", "return ret _ func", "return hawrapper", "class SdnvePluginV2 ( db _ base _ plugin _ v2 . NeutronDbPluginV2 ,", "external _ net _ db . External _ net _ db _ mixin ,", "portbindings _ db . PortBindingMixin ,", "l3 _ gwmode _ db . L3 _ NAT _ db _ mixin ,", ") :", "' ' '", "Implement the Neutron abstractions using SDN - VE SDN Controller .", "' ' '", "_ _ native _ bulk _ support = False", "_ _ native _ pagination _ support = False", "_ _ native _ sorting _ support = False", "supported _ extension _ aliases = [ `` binding `` , `` router `` , `` external - net `` ]", "def _ _ init _ _ ( self , configfile = None ) :", "self . base _ binding _ dict = {", "portbindings . VIF _ TYPE : portbindings . VIF _ TYPE _ OVS ,", "portbindings . VIF _ DETAILS : { portbindings . CAP _ PORT _ FILTER : False } }", "super ( SdnvePluginV2 , self ) . _ _ init _ _ ( )", "self . setup _ rpc ( )", "self . sdnve _ controller _ select ( )", "if self . fake _ controller :", "self . sdnve _ client = sdnve _ fake . FakeClient ( )", "else :", "self . sdnve _ client = sdnve . Client ( )", "def sdnve _ controller _ select ( self ) :", "self . fake _ controller = cfg . CONF . SDNVE . use _ fake _ controller", "def setup _ rpc ( self ) :", "# RPC support", "self . topic = topics . PLUGIN", "self . conn = rpc . create _ connection ( new = True )", "self . notifier = AgentNotifierApi ( topics . AGENT )", "self . callbacks = SdnveRpcCallbacks ( self . notifier )", "self . dispatcher = self . callbacks . create _ rpc _ dispatcher ( )", "self . conn . create _ consumer ( self . topic , self . dispatcher ,", "fanout = False )", "# Consume from all consumers in a thread", "self . conn . consume _ in _ thread ( )", "def _ update _ base _ binding _ dict ( self , tenant _ type ) :", "if tenant _ type = = constants . TENANT _ TYPE _ OVERLAY :", "self . base _ binding _ dict [", "portbindings . VIF _ TYPE ] = portbindings . VIF _ TYPE _ BRIDGE", "if tenant _ type = = constants . TENANT _ TYPE _ OF :", "self . base _ binding _ dict [", "portbindings . VIF _ TYPE ] = portbindings . VIF _ TYPE _ OVS", "def set _ controller ( self , context ) :", "LOG . info ( _ ( `` Set a new controller if needed . `` ) )", "new _ controller = self . sdnve _ client . sdnve _ get _ controller ( )", "if new _ controller :", "self . notifier . info _ update (", "context ,", "{ ' new _ controller ' : new _ controller } )", "LOG . info ( _ ( `` Set the controller to a new controller : % s `` ) ,", "new _ controller )", "def _ process _ request ( self , request , current ) :", "new _ request = dict (", "( k , v ) for k , v in request . items ( )", "if v ! = current . get ( k ) )", "msg = _ ( `` Original SDN - VE HTTP request : % ( orig ) s ; New request : % ( new ) s `` )", "LOG . debug ( msg , { ' orig ' : request , ' new ' : new _ request } )", "return new _ request", "#", "# Network", "#", "@ _ ha", "def create _ network ( self , context , network ) :", "LOG . debug ( _ ( `` Create network in progress : % r `` ) , network )", "session = context . session", "tenant _ id = self . _ get _ tenant _ id _ for _ create ( context , network [ ' network ' ] )", "# Create a new SDN - VE tenant if need be", "sdnve _ tenant = self . sdnve _ client . sdnve _ check _ and _ create _ tenant (", "tenant _ id )", "if sdnve _ tenant is None :", "raise sdnve _ exc . SdnveException (", "msg = _ ( ' Create net failed : no SDN - VE tenant . ' ) )", "with session . begin ( subtransactions = True ) :", "net = super ( SdnvePluginV2 , self ) . create _ network ( context , network )", "self . _ process _ l3 _ create ( context , net , network [ ' network ' ] )", "# Create SDN - VE network", "( res , data ) = self . sdnve _ client . sdnve _ create ( ' network ' , net )", "if res not in constants . HTTP _ ACCEPTABLE :", "super ( SdnvePluginV2 , self ) . delete _ network ( context , net [ ' id ' ] )", "raise sdnve _ exc . SdnveException (", "msg = ( _ ( ' Create net failed in SDN - VE : % s ' ) % res ) )", "LOG . debug ( _ ( `` Created network : % s `` ) , net [ ' id ' ] )", "return net", "@ _ ha", "def update _ network ( self , context , id , network ) :", "LOG . debug ( _ ( `` Update network in progress : % r `` ) , network )", "session = context . session", "processed _ request = { }", "with session . begin ( subtransactions = True ) :", "original _ network = super ( SdnvePluginV2 , self ) . get _ network (", "context , id )", "processed _ request [ ' network ' ] = self . _ process _ request (", "network [ ' network ' ] , original _ network )", "net = super ( SdnvePluginV2 , self ) . update _ network (", "context , id , network )", "self . _ process _ l3 _ update ( context , net , network [ ' network ' ] )", "if processed _ request [ ' network ' ] :", "( res , data ) = self . sdnve _ client . sdnve _ update (", "' network ' , id , processed _ request [ ' network ' ] )", "if res not in constants . HTTP _ ACCEPTABLE :", "net = super ( SdnvePluginV2 , self ) . update _ network (", "context , id , { ' network ' : original _ network } )", "raise sdnve _ exc . SdnveException (", "msg = ( _ ( ' Update net failed in SDN - VE : % s ' ) % res ) )", "return net", "@ _ ha", "def delete _ network ( self , context , id ) :", "LOG . debug ( _ ( `` Delete network in progress : % s `` ) , id )", "super ( SdnvePluginV2 , self ) . delete _ network ( context , id )", "( res , data ) = self . sdnve _ client . sdnve _ delete ( ' network ' , id )", "if res not in constants . HTTP _ ACCEPTABLE :", "LOG . error (", "_ ( `` Delete net failed after deleting the network in DB : % s `` ) ,", "res )", "@ _ ha", "def get _ network ( self , context , id , fields = None ) :", "LOG . debug ( _ ( `` Get network in progress : % s `` ) , id )", "return super ( SdnvePluginV2 , self ) . get _ network ( context , id , fields )", "@ _ ha", "def get _ networks ( self , context , filters = None , fields = None , sorts = None ,", "limit = None , marker = None , page _ reverse = False ) :", "LOG . debug ( _ ( `` Get networks in progress `` ) )", "return super ( SdnvePluginV2 , self ) . get _ networks (", "context , filters , fields , sorts , limit , marker , page _ reverse )", "#", "# Port", "#", "@ _ ha", "def create _ port ( self , context , port ) :", "LOG . debug ( _ ( `` Create port in progress : % r `` ) , port )", "session = context . session", "# Set port status as ' ACTIVE ' to avoid needing the agent", "port [ ' port ' ] [ ' status ' ] = q _ const . PORT _ STATUS _ ACTIVE", "port _ data = port [ ' port ' ]", "with session . begin ( subtransactions = True ) :", "port = super ( SdnvePluginV2 , self ) . create _ port ( context , port )", "if ' id ' not in port :", "return port", "# If the tenant _ id is set to ' ' by create _ port , add the id to", "# the request being sent to the controller as the controller", "# requires a tenant id", "tenant _ id = port . get ( ' tenant _ id ' )", "if not tenant _ id :", "LOG . debug ( _ ( `` Create port does not have tenant id info `` ) )", "original _ network = super ( SdnvePluginV2 , self ) . get _ network (", "context , port [ ' network _ id ' ] )", "original _ tenant _ id = original _ network [ ' tenant _ id ' ]", "port [ ' tenant _ id ' ] = original _ tenant _ id", "LOG . debug (", "_ ( `` Create port does not have tenant id info ; ``", "`` obtained is : % s `` ) ,", "port [ ' tenant _ id ' ] )", "os _ tenant _ id = tenant _ id", "id _ na , tenant _ type = self . sdnve _ client . sdnve _ get _ tenant _ byid (", "os _ tenant _ id )", "self . _ update _ base _ binding _ dict ( tenant _ type )", "self . _ process _ portbindings _ create _ and _ update ( context ,", "port _ data , port )", "# NOTE ( mb ) : Remove this block when controller is updated", "# Remove the information that the controller does not accept", "sdnve _ port = port . copy ( )", "sdnve _ port . pop ( ' device _ id ' , None )", "sdnve _ port . pop ( ' device _ owner ' , None )", "( res , data ) = self . sdnve _ client . sdnve _ create ( ' port ' , sdnve _ port )", "if res not in constants . HTTP _ ACCEPTABLE :", "super ( SdnvePluginV2 , self ) . delete _ port ( context , port [ ' id ' ] )", "raise sdnve _ exc . SdnveException (", "msg = ( _ ( ' Create port failed in SDN - VE : % s ' ) % res ) )", "LOG . debug ( _ ( `` Created port : % s `` ) , port . get ( ' id ' , ' id not found ' ) )", "return port", "@ _ ha", "def update _ port ( self , context , id , port ) :", "LOG . debug ( _ ( `` Update port in progress : % r `` ) , port )", "session = context . session", "processed _ request = { }", "with session . begin ( subtransactions = True ) :", "original _ port = super ( SdnvePluginV2 , self ) . get _ port (", "context , id )", "processed _ request [ ' port ' ] = self . _ process _ request (", "port [ ' port ' ] , original _ port )", "updated _ port = super ( SdnvePluginV2 , self ) . update _ port (", "context , id , port )", "os _ tenant _ id = updated _ port [ ' tenant _ id ' ]", "id _ na , tenant _ type = self . sdnve _ client . sdnve _ get _ tenant _ byid (", "os _ tenant _ id )", "self . _ update _ base _ binding _ dict ( tenant _ type )", "self . _ process _ portbindings _ create _ and _ update ( context ,", "port [ ' port ' ] ,", "updated _ port )", "if processed _ request [ ' port ' ] :", "( res , data ) = self . sdnve _ client . sdnve _ update (", "' port ' , id , processed _ request [ ' port ' ] )", "if res not in constants . HTTP _ ACCEPTABLE :", "updated _ port = super ( SdnvePluginV2 , self ) . update _ port (", "context , id , { ' port ' : original _ port } )", "raise sdnve _ exc . SdnveException (", "msg = ( _ ( ' Update port failed in SDN - VE : % s ' ) % res ) )", "return updated _ port", "@ _ ha", "def delete _ port ( self , context , id , l3 _ port _ check = True ) :", "LOG . debug ( _ ( `` Delete port in progress : % s `` ) , id )", "# if needed , check to see if this is a port owned by", "# an l3 - router . If so , we should prevent deletion .", "if l3 _ port _ check :", "self . prevent _ l3 _ port _ deletion ( context , id )", "self . disassociate _ floatingips ( context , id )", "super ( SdnvePluginV2 , self ) . delete _ port ( context , id )", "( res , data ) = self . sdnve _ client . sdnve _ delete ( ' port ' , id )", "if res not in constants . HTTP _ ACCEPTABLE :", "LOG . error (", "_ ( `` Delete port operation failed in SDN - VE ``", "`` after deleting the port from DB : % s `` ) , res )", "#", "# Subnet", "#", "@ _ ha", "def create _ subnet ( self , context , subnet ) :", "LOG . debug ( _ ( `` Create subnet in progress : % r `` ) , subnet )", "new _ subnet = super ( SdnvePluginV2 , self ) . create _ subnet ( context , subnet )", "# Note ( mb ) : Use of null string currently required by controller", "sdnve _ subnet = new _ subnet . copy ( )", "if subnet . get ( ' gateway _ ip ' ) is None :", "sdnve _ subnet [ ' gateway _ ip ' ] = ' null '", "( res , data ) = self . sdnve _ client . sdnve _ create ( ' subnet ' , sdnve _ subnet )", "if res not in constants . HTTP _ ACCEPTABLE :", "super ( SdnvePluginV2 , self ) . delete _ subnet ( context ,", "new _ subnet [ ' id ' ] )", "raise sdnve _ exc . SdnveException (", "msg = ( _ ( ' Create subnet failed in SDN - VE : % s ' ) % res ) )", "LOG . debug ( _ ( `` Subnet created : % s `` ) , new _ subnet [ ' id ' ] )", "return new _ subnet", "@ _ ha", "def update _ subnet ( self , context , id , subnet ) :", "LOG . debug ( _ ( `` Update subnet in progress : % r `` ) , subnet )", "session = context . session", "processed _ request = { }", "with session . begin ( subtransactions = True ) :", "original _ subnet = super ( SdnvePluginV2 , self ) . get _ subnet (", "context , id )", "processed _ request [ ' subnet ' ] = self . _ process _ request (", "subnet [ ' subnet ' ] , original _ subnet )", "updated _ subnet = super ( SdnvePluginV2 , self ) . update _ subnet (", "context , id , subnet )", "if processed _ request [ ' subnet ' ] :", "# Note ( mb ) : Use of string containing null required by controller", "if ' gateway _ ip ' in processed _ request [ ' subnet ' ] :", "if processed _ request [ ' subnet ' ] . get ( ' gateway _ ip ' ) is None :", "processed _ request [ ' subnet ' ] [ ' gateway _ ip ' ] = ' null '", "( res , data ) = self . sdnve _ client . sdnve _ update (", "' subnet ' , id , processed _ request [ ' subnet ' ] )", "if res not in constants . HTTP _ ACCEPTABLE :", "for key in subnet [ ' subnet ' ] . keys ( ) :", "subnet [ ' subnet ' ] [ key ] = original _ subnet [ key ]", "super ( SdnvePluginV2 , self ) . update _ subnet (", "context , id , subnet )", "raise sdnve _ exc . SdnveException (", "msg = ( _ ( ' Update subnet failed in SDN - VE : % s ' ) % res ) )", "return updated _ subnet", "@ _ ha", "def delete _ subnet ( self , context , id ) :", "LOG . debug ( _ ( `` Delete subnet in progress : % s `` ) , id )", "super ( SdnvePluginV2 , self ) . delete _ subnet ( context , id )", "( res , data ) = self . sdnve _ client . sdnve _ delete ( ' subnet ' , id )", "if res not in constants . HTTP _ ACCEPTABLE :", "LOG . error ( _ ( `` Delete subnet operation failed in SDN - VE after ``", "`` deleting the subnet from DB : % s `` ) , res )", "#", "# Router", "#", "@ _ ha", "def create _ router ( self , context , router ) :", "LOG . debug ( _ ( `` Create router in progress : % r `` ) , router )", "if router [ ' router ' ] [ ' admin _ state _ up ' ] is False :", "LOG . warning ( _ ( ' Ignoring admin _ state _ up = False for router = % r . '", "' Overriding with True ' ) , router )", "router [ ' router ' ] [ ' admin _ state _ up ' ] = True", "tenant _ id = self . _ get _ tenant _ id _ for _ create ( context , router [ ' router ' ] )", "# Create a new Pinnaacles tenant if need be", "sdnve _ tenant = self . sdnve _ client . sdnve _ check _ and _ create _ tenant (", "tenant _ id )", "if sdnve _ tenant is None :", "raise sdnve _ exc . SdnveException (", "msg = _ ( ' Create router failed : no SDN - VE tenant . ' ) )", "new _ router = super ( SdnvePluginV2 , self ) . create _ router ( context , router )", "# Create Sdnve router", "( res , data ) = self . sdnve _ client . sdnve _ create ( ' router ' , new _ router )", "if res not in constants . HTTP _ ACCEPTABLE :", "super ( SdnvePluginV2 , self ) . delete _ router ( context , new _ router [ ' id ' ] )", "raise sdnve _ exc . SdnveException (", "msg = ( _ ( ' Create router failed in SDN - VE : % s ' ) % res ) )", "LOG . debug ( _ ( `` Router created : % r `` ) , new _ router )", "return new _ router", "@ _ ha", "def update _ router ( self , context , id , router ) :", "LOG . debug ( _ ( `` Update router in progress : id = % ( id ) s ``", "`` router = % ( router ) r `` ) ,", "{ ' id ' : id , ' router ' : router } )", "session = context . session", "processed _ request = { }", "if not router [ ' router ' ] . get ( ' admin _ state _ up ' , True ) :", "raise q _ exc . NotImplementedError ( _ ( ' admin _ state _ up = False '", "' routers are not '", "' supported . ' ) )", "with session . begin ( subtransactions = True ) :", "original _ router = super ( SdnvePluginV2 , self ) . get _ router (", "context , id )", "processed _ request [ ' router ' ] = self . _ process _ request (", "router [ ' router ' ] , original _ router )", "updated _ router = super ( SdnvePluginV2 , self ) . update _ router (", "context , id , router )", "if processed _ request [ ' router ' ] :", "( res , data ) = self . sdnve _ client . sdnve _ update (", "' router ' , id , processed _ request [ ' router ' ] )", "if res not in constants . HTTP _ ACCEPTABLE :", "super ( SdnvePluginV2 , self ) . update _ router (", "context , id , { ' router ' : original _ router } )", "raise sdnve _ exc . SdnveException (", "msg = ( _ ( ' Update router failed in SDN - VE : % s ' ) % res ) )", "return updated _ router", "@ _ ha", "def delete _ router ( self , context , id ) :", "LOG . debug ( _ ( `` Delete router in progress : % s `` ) , id )", "super ( SdnvePluginV2 , self ) . delete _ router ( context , id )", "( res , data ) = self . sdnve _ client . sdnve _ delete ( ' router ' , id )", "if res not in constants . HTTP _ ACCEPTABLE :", "LOG . error (", "_ ( `` Delete router operation failed in SDN - VE after ``", "`` deleting the router in DB : % s `` ) , res )", "@ _ ha", "def add _ router _ interface ( self , context , router _ id , interface _ info ) :", "LOG . debug ( _ ( `` Add router interface in progress : ``", "`` router _ id = % ( router _ id ) s ``", "`` interface _ info = % ( interface _ info ) r `` ) ,", "{ ' router _ id ' : router _ id , ' interface _ info ' : interface _ info } )", "new _ interface = super ( SdnvePluginV2 , self ) . add _ router _ interface (", "context , router _ id , interface _ info )", "LOG . debug (", "_ ( `` SdnvePluginV2 . add _ router _ interface called . Port info : % s `` ) ,", "new _ interface )", "request _ info = interface _ info . copy ( )", "request _ info [ ' port _ id ' ] = new _ interface [ ' port _ id ' ]", "# Add the subnet _ id to the request sent to the controller", "if ' subnet _ id ' not in interface _ info :", "request _ info [ ' subnet _ id ' ] = new _ interface [ ' subnet _ id ' ]", "( res , data ) = self . sdnve _ client . sdnve _ update (", "' router ' , router _ id + ' / add _ router _ interface ' , request _ info )", "if res not in constants . HTTP _ ACCEPTABLE :", "super ( SdnvePluginV2 , self ) . remove _ router _ interface (", "context , router _ id , interface _ info )", "raise sdnve _ exc . SdnveException (", "msg = ( _ ( ' Update router - add - interface failed in SDN - VE : % s ' ) %", "res ) )", "LOG . debug ( _ ( `` Added router interface : % r `` ) , new _ interface )", "return new _ interface", "def _ add _ router _ interface _ only ( self , context , router _ id , interface _ info ) :", "LOG . debug ( _ ( `` Add router interface only called : ``", "`` router _ id = % ( router _ id ) s ``", "`` interface _ info = % ( interface _ info ) r `` ) ,", "{ ' router _ id ' : router _ id , ' interface _ info ' : interface _ info } )", "port _ id = interface _ info . get ( ' port _ id ' )", "if port _ id :", "( res , data ) = self . sdnve _ client . sdnve _ update (", "' router ' , router _ id + ' / add _ router _ interface ' , interface _ info )", "if res not in constants . HTTP _ ACCEPTABLE :", "LOG . error ( _ ( `` SdnvePluginV2 . _ add _ router _ interface _ only : ``", "`` failed to add the interface in the roll back . ``", "`` of a remove _ router _ interface operation `` ) )", "@ _ ha", "def remove _ router _ interface ( self , context , router _ id , interface _ info ) :", "LOG . debug ( _ ( `` Remove router interface in progress : ``", "`` router _ id = % ( router _ id ) s ``", "`` interface _ info = % ( interface _ info ) r `` ) ,", "{ ' router _ id ' : router _ id , ' interface _ info ' : interface _ info } )", "subnet _ id = interface _ info . get ( ' subnet _ id ' )", "if not subnet _ id :", "portid = interface _ info . get ( ' port _ id ' )", "if not portid :", "raise sdnve _ exc . BadInputException ( msg = _ ( ' No port ID ' ) )", "myport = super ( SdnvePluginV2 , self ) . get _ port ( context , portid )", "LOG . debug ( _ ( `` SdnvePluginV2 . remove _ router _ interface port : % s `` ) ,", "myport )", "myfixed _ ips = myport . get ( ' fixed _ ips ' )", "if not myfixed _ ips :", "raise sdnve _ exc . BadInputException ( msg = _ ( ' No fixed IP ' ) )", "subnet _ id = myfixed _ ips [ 0 ] . get ( ' subnet _ id ' )", "if subnet _ id :", "interface _ info [ ' subnet _ id ' ] = subnet _ id", "LOG . debug (", "_ ( `` SdnvePluginV2 . remove _ router _ interface subnet _ id : % s `` ) ,", "subnet _ id )", "( res , data ) = self . sdnve _ client . sdnve _ update (", "' router ' , router _ id + ' / remove _ router _ interface ' , interface _ info )", "if res not in constants . HTTP _ ACCEPTABLE :", "raise sdnve _ exc . SdnveException (", "msg = ( _ ( ' Update router - remove - interface failed SDN - VE : % s ' ) %", "res ) )", "session = context . session", "with session . begin ( subtransactions = True ) :", "try :", "info = super ( SdnvePluginV2 , self ) . remove _ router _ interface (", "context , router _ id , interface _ info )", "except Exception :", "with excutils . save _ and _ reraise _ exception ( ) :", "self . _ add _ router _ interface _ only ( context ,", "router _ id , interface _ info )", "return info", "#", "# Floating Ip", "#", "@ _ ha", "def create _ floatingip ( self , context , floatingip ) :", "LOG . debug ( _ ( `` Create floatingip in progress : % r `` ) ,", "floatingip )", "new _ floatingip = super ( SdnvePluginV2 , self ) . create _ floatingip (", "context , floatingip )", "( res , data ) = self . sdnve _ client . sdnve _ create (", "' floatingip ' , { ' floatingip ' : new _ floatingip } )", "if res not in constants . HTTP _ ACCEPTABLE :", "super ( SdnvePluginV2 , self ) . delete _ floatingip (", "context , new _ floatingip [ ' id ' ] )", "raise sdnve _ exc . SdnveException (", "msg = ( _ ( ' Creating floating ip operation failed '", "' in SDN - VE controller : % s ' ) % res ) )", "LOG . debug ( _ ( `` Created floatingip : % r `` ) , new _ floatingip )", "return new _ floatingip", "@ _ ha", "def update _ floatingip ( self , context , id , floatingip ) :", "LOG . debug ( _ ( `` Update floatingip in progress : % r `` ) , floatingip )", "session = context . session", "processed _ request = { }", "with session . begin ( subtransactions = True ) :", "original _ floatingip = super (", "SdnvePluginV2 , self ) . get _ floatingip ( context , id )", "processed _ request [ ' floatingip ' ] = self . _ process _ request (", "floatingip [ ' floatingip ' ] , original _ floatingip )", "updated _ floatingip = super (", "SdnvePluginV2 , self ) . update _ floatingip ( context , id , floatingip )", "if processed _ request [ ' floatingip ' ] :", "( res , data ) = self . sdnve _ client . sdnve _ update (", "' floatingip ' , id ,", "{ ' floatingip ' : processed _ request [ ' floatingip ' ] } )", "if res not in constants . HTTP _ ACCEPTABLE :", "super ( SdnvePluginV2 , self ) . update _ floatingip (", "context , id , { ' floatingip ' : original _ floatingip } )", "raise sdnve _ exc . SdnveException (", "msg = ( _ ( ' Update floating ip failed in SDN - VE : % s ' ) % res ) )", "return updated _ floatingip", "@ _ ha", "def delete _ floatingip ( self , context , id ) :", "LOG . debug ( _ ( `` Delete floatingip in progress : % s `` ) , id )", "super ( SdnvePluginV2 , self ) . delete _ floatingip ( context , id )", "( res , data ) = self . sdnve _ client . sdnve _ delete ( ' floatingip ' , id )", "if res not in constants . HTTP _ ACCEPTABLE :", "LOG . error ( _ ( `` Delete floatingip failed in SDN - VE : % s `` ) , res )", ],"removed_code":[]},{"added_code":[],"removed_code":[]},{"added_code":["Copyright 2014 IBM Corp .", "", "All Rights Reserved .", "", "Licensed under the Apache License , Version 2 . 0 ( the `` License `` ) ; you may", "not use this file except in compliance with the License . You may obtain", "a copy of the License at", "", "http : / / www . apache . org / licenses / LICENSE - 2 . 0", "", "Unless required by applicable law or agreed to in writing , software", "distributed under the License is distributed on an `` AS IS `` BASIS , WITHOUT", "WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . See the", "License for the specific language governing permissions and limitations", "under the License .", "", "@ author : Mohammad Banikazemi , IBM Corp", "import contextlib", "import mock", "from oslo . config import cfg", "from neutron . agent . linux import ip _ lib", "from neutron . plugins . ibm . agent import sdnve _ neutron _ agent", "from neutron . tests import base", "NOTIFIER = ( ' neutron . plugins . ibm . '", "' sdnve _ neutron _ plugin . AgentNotifierApi ' )", "class CreateAgentConfigMap ( base . BaseTestCase ) :", "def test _ create _ agent _ config _ map _ succeeds ( self ) :", "self . assertTrue ( sdnve _ neutron _ agent . create _ agent _ config _ map ( cfg . CONF ) )", "def test _ create _ agent _ config _ using _ controller _ ips ( self ) :", "self . addCleanup ( cfg . CONF . reset )", "cfg . CONF . set _ override ( ' controller _ ips ' ,", "[ ' 10 . 10 . 10 . 1 ' , ' 10 . 10 . 10 . 2 ' ] , group = ' SDNVE ' )", "cfgmap = sdnve _ neutron _ agent . create _ agent _ config _ map ( cfg . CONF )", "self . assertEqual ( cfgmap [ ' controller _ ip ' ] , ' 10 . 10 . 10 . 1 ' )", "def test _ create _ agent _ config _ using _ interface _ mappings ( self ) :", "self . addCleanup ( cfg . CONF . reset )", "cfg . CONF . set _ override ( ' interface _ mappings ' ,", "[ ' interface1 : eth1 ' , ' interface2 : eth2 ' ] ,", "group = ' SDNVE ' )", "cfgmap = sdnve _ neutron _ agent . create _ agent _ config _ map ( cfg . CONF )", "self . assertEqual ( cfgmap [ ' interface _ mappings ' ] ,", "{ ' interface1 ' : ' eth1 ' , ' interface2 ' : ' eth2 ' } )", "class TestSdnveNeutronAgent ( base . BaseTestCase ) :", "def setUp ( self ) :", "super ( TestSdnveNeutronAgent , self ) . setUp ( )", "self . addCleanup ( cfg . CONF . reset )", "notifier _ p = mock . patch ( NOTIFIER )", "notifier _ cls = notifier _ p . start ( )", "self . notifier = mock . Mock ( )", "notifier _ cls . return _ value = self . notifier", "# Avoid rpc initialization for unit tests", "cfg . CONF . set _ override ( ' rpc _ backend ' ,", "' neutron . openstack . common . rpc . impl _ fake ' )", "cfg . CONF . set _ override ( ' integration _ bridge ' ,", "' br _ int ' , group = ' SDNVE ' )", "kwargs = sdnve _ neutron _ agent . create _ agent _ config _ map ( cfg . CONF )", "class MockFixedIntervalLoopingCall ( object ) :", "def _ _ init _ _ ( self , f ) :", "self . f = f", "def start ( self , interval = 0 ) :", "self . f ( )", "with contextlib . nested (", "mock . patch ( ' neutron . plugins . ibm . agent . sdnve _ neutron _ agent . '", "' SdnveNeutronAgent . setup _ integration _ br ' ,", "return _ value = mock . Mock ( ) ) ,", "mock . patch ( ' neutron . openstack . common . loopingcall . '", "' FixedIntervalLoopingCall ' ,", "new = MockFixedIntervalLoopingCall ) ) :", "self . agent = sdnve _ neutron _ agent . SdnveNeutronAgent ( * * kwargs )", "def test _ setup _ physical _ interfaces ( self ) :", "with mock . patch . object ( self . agent . int _ br ,", "' add _ port ' ) as add _ port _ func :", "with mock . patch . object ( ip _ lib ,", "' device _ exists ' ,", "return _ valxue = True ) :", "self . agent . setup _ physical _ interfaces ( { `` interface1 `` : `` eth1 `` } )", "add _ port _ func . assert _ called _ once _ with ( ' eth1 ' )", "def test _ setup _ physical _ interfaces _ none ( self ) :", "with mock . patch . object ( self . agent . int _ br ,", "' add _ port ' ) as add _ port _ func :", "with mock . patch . object ( ip _ lib ,", "' device _ exists ' ,", "return _ valxue = True ) :", "self . agent . setup _ physical _ interfaces ( { } )", "self . assertFalse ( add _ port _ func . called )", "def test _ get _ info _ set _ controller ( self ) :", "with mock . patch . object ( self . agent . int _ br ,", "' run _ vsctl ' ) as run _ vsctl _ func :", "kwargs = { }", "kwargs [ ' info ' ] = { ' new _ controller ' : ' 10 . 10 . 10 . 1 ' }", "self . agent . info _ update ( ' dummy ' , * * kwargs )", "run _ vsctl _ func . assert _ called _ one _ with ( [ ' set - controller ' ,", "' br _ int ' ,", "' tcp : 10 . 10 . 10 . 1 ' ] )", "def test _ get _ info ( self ) :", "with mock . patch . object ( self . agent . int _ br ,", "' run _ vsctl ' ) as run _ vsctl _ func :", "kwargs = { }", "self . agent . info _ update ( ' dummy ' , * * kwargs )", "self . assertFalse ( run _ vsctl _ func . called )", ],"removed_code":[]},{"added_code":["Copyright 2014 IBM Corp .", "", "All Rights Reserved .", "", "Licensed under the Apache License , Version 2 . 0 ( the `` License `` ) ; you may", "not use this file except in compliance with the License . You may obtain", "a copy of the License at", "", "http : / / www . apache . org / licenses / LICENSE - 2 . 0", "", "Unless required by applicable law or agreed to in writing , software", "distributed under the License is distributed on an `` AS IS `` BASIS , WITHOUT", "WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . See the", "License for the specific language governing permissions and limitations", "under the License .", "", "@ author : Mohammad Banikazemi , IBM Corp", "import mock", "from oslo . config import cfg", "from neutron . openstack . common import uuidutils", "from neutron . plugins . ibm . common import constants", "from neutron . plugins . ibm import sdnve _ api", "from neutron . tests import base", "RESOURCE _ PATH = {", "' network ' : `` ln / networks / `` ,", "}", "RESOURCE = ' network '", "HTTP _ OK = 200", "TENANT _ ID = uuidutils . generate _ uuid ( )", "class TestSdnveApi ( base . BaseTestCase ) :", "def setUp ( self ) :", "super ( TestSdnveApi , self ) . setUp ( )", "self . addCleanup ( cfg . CONF . reset )", "class MockKeystoneClient ( object ) :", "def _ _ init _ _ ( self , * * kwargs ) :", "pass", "def get _ tenant _ name ( self , id ) :", "return ' test tenant name '", "with mock . patch ( ' neutron . plugins . ibm . sdnve _ api . '", "' KeystoneClient ' ,", "new = MockKeystoneClient ) :", "self . api = sdnve _ api . Client ( )", "def mock _ do _ request ( self , method , url , body = None , headers = None ,", "params = None , connection _ type = None ) :", "return ( HTTP _ OK , url )", "def mock _ do _ request _ tenant ( self , method , url , body = None , headers = None ,", "params = None , connection _ type = None ) :", "return ( HTTP _ OK , { ' id ' : TENANT _ ID ,", "' network _ type ' : constants . TENANT _ TYPE _ OF } )", "def mock _ do _ request _ no _ tenant ( self , method , url , body = None , headers = None ,", "params = None , connection _ type = None ) :", "return ( None , None )", "def mock _ process _ request ( self , body ) :", "return body", "def test _ sdnve _ api _ list ( self ) :", "with mock . patch ( ' neutron . plugins . ibm . sdnve _ api . '", "' Client . do _ request ' ,", "new = self . mock _ do _ request ) :", "result = self . api . sdnve _ list ( RESOURCE )", "self . assertEqual ( result , ( HTTP _ OK , RESOURCE _ PATH [ RESOURCE ] ) )", "def test _ sdnve _ api _ show ( self ) :", "with mock . patch ( ' neutron . plugins . ibm . sdnve _ api . '", "' Client . do _ request ' ,", "new = self . mock _ do _ request ) :", "result = self . api . sdnve _ show ( RESOURCE , TENANT _ ID )", "self . assertEqual ( result ,", "( HTTP _ OK , RESOURCE _ PATH [ RESOURCE ] + TENANT _ ID ) )", "def test _ sdnve _ api _ create ( self ) :", "with mock . patch ( ' neutron . plugins . ibm . sdnve _ api . '", "' Client . do _ request ' ,", "new = self . mock _ do _ request ) :", "with mock . patch ( ' neutron . plugins . ibm . sdnve _ api . '", "' Client . process _ request ' ,", "new = self . mock _ process _ request ) :", "result = self . api . sdnve _ create ( RESOURCE , ' ' )", "self . assertEqual ( result , ( HTTP _ OK , RESOURCE _ PATH [ RESOURCE ] ) )", "def test _ sdnve _ api _ update ( self ) :", "with mock . patch ( ' neutron . plugins . ibm . sdnve _ api . '", "' Client . do _ request ' ,", "new = self . mock _ do _ request ) :", "with mock . patch ( ' neutron . plugins . ibm . sdnve _ api . '", "' Client . process _ request ' ,", "new = self . mock _ process _ request ) :", "result = self . api . sdnve _ update ( RESOURCE , TENANT _ ID , ' ' )", "self . assertEqual ( result ,", "( HTTP _ OK ,", "RESOURCE _ PATH [ RESOURCE ] + TENANT _ ID ) )", "def test _ sdnve _ api _ delete ( self ) :", "with mock . patch ( ' neutron . plugins . ibm . sdnve _ api . '", "' Client . do _ request ' ,", "new = self . mock _ do _ request ) :", "result = self . api . sdnve _ delete ( RESOURCE , TENANT _ ID )", "self . assertEqual ( result ,", "( HTTP _ OK , RESOURCE _ PATH [ RESOURCE ] + TENANT _ ID ) )", "def test _ sdnve _ get _ tenant _ by _ id ( self ) :", "with mock . patch ( ' neutron . plugins . ibm . sdnve _ api . '", "' Client . do _ request ' ,", "new = self . mock _ do _ request _ tenant ) :", "id = TENANT _ ID", "result = self . api . sdnve _ get _ tenant _ byid ( id )", "self . assertEqual ( result ,", "( TENANT _ ID , constants . TENANT _ TYPE _ OF ) )", "def test _ sdnve _ check _ and _ create _ tenant ( self ) :", "with mock . patch ( ' neutron . plugins . ibm . sdnve _ api . '", "' Client . do _ request ' ,", "new = self . mock _ do _ request _ tenant ) :", "id = TENANT _ ID", "result = self . api . sdnve _ check _ and _ create _ tenant ( id )", "self . assertEqual ( result , TENANT _ ID )", "def test _ sdnve _ check _ and _ create _ tenant _ fail ( self ) :", "with mock . patch ( ' neutron . plugins . ibm . sdnve _ api . '", "' Client . do _ request ' ,", "new = self . mock _ do _ request _ no _ tenant ) :", "id = TENANT _ ID", "result = self . api . sdnve _ check _ and _ create _ tenant (", "id , constants . TENANT _ TYPE _ OF )", "self . assertIsNone ( result )", ],"removed_code":[]},{"added_code":["Copyright 2014 IBM Corp .", "", "All Rights Reserved .", "", "Licensed under the Apache License , Version 2 . 0 ( the `` License `` ) ; you may", "not use this file except in compliance with the License . You may obtain", "a copy of the License at", "", "http : / / www . apache . org / licenses / LICENSE - 2 . 0", "", "Unless required by applicable law or agreed to in writing , software", "distributed under the License is distributed on an `` AS IS `` BASIS , WITHOUT", "WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . See the", "License for the specific language governing permissions and limitations", "under the License .", "", "@ author : Mohammad Banikazemi , IBM Corp", "import contextlib", "import mock", "from neutron . extensions import portbindings", "from neutron . tests . unit import _ test _ extension _ portbindings as test _ bindings", "from neutron . tests . unit import test _ db _ plugin as test _ plugin", "from neutron . tests . unit import test _ l3 _ plugin as test _ l3 _ plugin", "from neutron . plugins . ibm . common import constants", "_ plugin _ name = ( ' neutron . plugins . ibm . '", "' sdnve _ neutron _ plugin . SdnvePluginV2 ' )", "HTTP _ OK = 200", "class MockClient ( object ) :", "def sdnve _ list ( self , resource , * * params ) :", "return ( HTTP _ OK , ' body ' )", "def sdnve _ show ( self , resource , specific , * * params ) :", "return ( HTTP _ OK , ' body ' )", "def sdnve _ create ( self , resource , body ) :", "return ( HTTP _ OK , ' body ' )", "def sdnve _ update ( self , resource , specific , body = None ) :", "return ( HTTP _ OK , ' body ' )", "def sdnve _ delete ( self , resource , specific ) :", "return ( HTTP _ OK , ' body ' )", "def sdnve _ get _ tenant _ byid ( self , os _ tenant _ id ) :", "return ( os _ tenant _ id , constants . TENANT _ TYPE _ OF )", "def sdnve _ check _ and _ create _ tenant (", "self , os _ tenant _ id , network _ type = None ) :", "return os _ tenant _ id", "def sdnve _ get _ controller ( self ) :", "return", "class MockKeystoneClient ( object ) :", "def _ _ init _ _ ( self , * * kwargs ) :", "pass", "def get _ tenant _ type ( self , id ) :", "return constants . TENANT _ TYPE _ OF", "def get _ tenant _ name ( self , id ) :", "return `` tenant name ``", "class IBMPluginV2TestCase ( test _ plugin . NeutronDbPluginV2TestCase ) :", "def setUp ( self ) :", "with contextlib . nested (", "mock . patch ( ' neutron . plugins . ibm . sdnve _ api . '", "' KeystoneClient ' ,", "new = MockKeystoneClient ) ,", "mock . patch ( ' neutron . plugins . ibm . sdnve _ api . '", "' Client ' ,", "new = MockClient ) ) :", "super ( IBMPluginV2TestCase , self ) . setUp ( plugin = _ plugin _ name )", "class TestIBMBasicGet ( test _ plugin . TestBasicGet ,", "IBMPluginV2TestCase ) :", "pass", "class TestIBMV2HTTPResponse ( test _ plugin . TestV2HTTPResponse ,", "IBMPluginV2TestCase ) :", "pass", "class TestIBMNetworksV2 ( test _ plugin . TestNetworksV2 ,", "IBMPluginV2TestCase ) :", "pass", "class TestIBMPortsV2 ( test _ plugin . TestPortsV2 ,", "IBMPluginV2TestCase ) :", "pass", "class TestIBMSubnetsV2 ( test _ plugin . TestSubnetsV2 ,", "IBMPluginV2TestCase ) :", "pass", "class TestIBMPortBinding ( IBMPluginV2TestCase ,", "test _ bindings . PortBindingsTestCase ) :", "VIF _ TYPE = portbindings . VIF _ TYPE _ OVS", "class IBMPluginRouterTestCase ( test _ l3 _ plugin . L3NatDBIntTestCase ) :", "def setUp ( self ) :", "with contextlib . nested (", "mock . patch ( ' neutron . plugins . ibm . sdnve _ api . '", "' KeystoneClient ' ,", "new = MockKeystoneClient ) ,", "mock . patch ( ' neutron . plugins . ibm . sdnve _ api . '", "' Client ' ,", "new = MockClient ) ) :", "super ( IBMPluginRouterTestCase , self ) . setUp ( plugin = _ plugin _ name )", ],"removed_code":[]},{"added_code":["etc / neutron / plugins / ibm = etc / neutron / plugins / ibm / sdnve _ neutron _ plugin . ini", "neutron - ibm - agent = neutron . plugins . ibm . agent . sdnve _ neutron _ agent : main", "quantum - ibm - agent = neutron . plugins . ibm . agent . sdnve _ neutron _ agent : main", "ibm = neutron . plugins . ibm . sdnve _ neutron _ plugin : SdnvePluginV2", ],"removed_code":[]},],[{"added_code":["KeystoneAuth", "= = = = = = = = = = = =", ". . automodule : : swift . common . middleware . keystoneauth", ": members :", ": show - inheritance :", "= = = = = = = = = = = = = = = =", ],"removed_code":["= = = = = = = = = = = = =", ]},{"added_code":["to be configured with ` ` delay _ auth _ decision ` ` set to 1 . See the", "[ app : proxy - server ]", "account _ autocreate = true", "will be the one that are inside the ` ` operator _ roles ` `", "` ` reseller _ prefix ` ` in your keystoneauth entry like this : :", "` ` reseller _ prefix ` ` option .", ],"removed_code":["to be configured with delay _ auth _ decision set to 1 . See the", "[ app : proxy - server ] account _ autocreate = true", "will be the one that are inside the operator _ roles", "reseller _ prefix in your keystoneauth entry like this :", "reseller _ prefix option .", ]},],[{"added_code":["nova / virt / libvirt / vif . py : ' ebrctl ' , . . .", "ebrctl : CommandFilter , ebrctl , root", ],"removed_code":[]},{"added_code":["VIF _ TYPE _ MLNX _ DIRECT = ' mlnx _ direct '", ],"removed_code":[]},{"added_code":["port _ profile = port . get ( ' binding : profile ' )", "if port _ profile :", "physical _ network = port _ profile . get ( ' physical _ network ' )", "if physical _ network :", "network [ ' physical _ network ' ] = physical _ network", ],"removed_code":[]},{"added_code":["' physical _ network ' : None ,", "netmask _ v6 = net _ v6 . as _ netaddr ( ) . _ prefixlen ,", "physical _ network =", "network . get _ meta ( ' physical _ network ' , None ) )", ],"removed_code":["netmask _ v6 = net _ v6 . as _ netaddr ( ) . _ prefixlen )", ]},{"added_code":["def test _ config _ direct ( self ) :", "obj = config . LibvirtConfigGuestInterface ( )", "obj . net _ type = `` direct ``", "obj . mac _ addr = `` DE : AD : BE : EF : CA : FE ``", "obj . model = `` virtio ``", "obj . source _ dev = `` eth0 ``", "obj . source _ mode = `` passthrough ``", "xml = obj . to _ xml ( )", "self . assertXmlEqual ( xml , `` `` ``", "< interface type = `` direct `` >", "< mac address = `` DE : AD : BE : EF : CA : FE `` / >", "< model type = `` virtio `` / >", "< source dev = `` eth0 `` mode = `` passthrough `` / >", "< / interface > `` `` `` )", ],"removed_code":[]},{"added_code":["network _ mlnx = network _ model . Network ( id = ' network - id - xxx - yyy - zzz ' ,", "label = None ,", "bridge = None ,", "subnets = [ subnet _ bridge _ 4 ,", "subnet _ bridge _ 6 ] ,", "interface = ' eth0 ' )", "vif _ mlnx = network _ model . VIF ( id = ' vif - xxx - yyy - zzz ' ,", "address = ' ca : fe : de : ad : be : ef ' ,", "network = network _ mlnx ,", "type = network _ model . VIF _ TYPE _ MLNX _ DIRECT ,", "devname = ' tap - xxx - yyy - zzz ' )", "def test _ mlnx _ direct _ vif _ driver ( self ) :", "d = vif . LibvirtGenericVIFDriver ( self . _ get _ conn ( ) )", "xml = self . _ get _ instance _ xml ( d ,", "self . vif _ mlnx )", "node = self . _ get _ node ( xml )", "self . assertEqual ( node . get ( `` type `` ) , `` direct `` )", "self . _ assertTypeEquals ( node , `` direct `` , `` source `` ,", "`` dev `` , `` eth - xxx - yyy - zzz `` )", "self . _ assertTypeEquals ( node , `` direct `` , `` source `` ,", "`` mode `` , `` passthrough `` )", "self . _ assertMacEquals ( node , self . vif _ mlnx )", "self . _ assertModel ( xml , `` virtio `` )", ],"removed_code":[]},{"added_code":["def set _ vif _ host _ backend _ direct _ config ( conf , devname ) :", "`` `` `` Populate a LibvirtConfigGuestInterface instance", "with direct Interface .", "`` `` ``", "conf . net _ type = `` direct ``", "conf . source _ mode = `` passthrough ``", "conf . source _ dev = devname", "conf . model = `` virtio ``", ],"removed_code":[]},{"added_code":["DEV _ PREFIX _ ETH = ' eth '", "def get _ vif _ devname _ with _ prefix ( self , vif , prefix ) :", "devname = self . get _ vif _ devname ( vif )", "return prefix + devname [ 3 : ]", "def get _ config _ mlnx _ direct ( self , instance , vif , image _ meta ,", "inst _ type ) :", "conf = super ( LibvirtGenericVIFDriver ,", "self ) . get _ config ( instance , vif ,", "image _ meta , inst _ type )", "devname = self . get _ vif _ devname _ with _ prefix ( vif , DEV _ PREFIX _ ETH )", "designer . set _ vif _ host _ backend _ direct _ config ( conf , devname )", "return conf", "elif vif _ type = = network _ model . VIF _ TYPE _ MLNX _ DIRECT :", "return self . get _ config _ mlnx _ direct ( instance ,", "vif ,", "image _ meta ,", "inst _ type )", "def plug _ mlnx _ direct ( self , instance , vif ) :", "super ( LibvirtGenericVIFDriver ,", "self ) . plug ( instance , vif )", "network = vif [ ' network ' ]", "vnic _ mac = vif [ ' address ' ]", "device _ id = instance [ ' uuid ' ]", "fabric = network [ ' meta ' ] [ ' physical _ network ' ]", "dev _ name = self . get _ vif _ devname _ with _ prefix ( vif , DEV _ PREFIX _ ETH )", "try :", "utils . execute ( ' ebrctl ' , ' add - port ' , vnic _ mac , device _ id , fabric ,", "network _ model . VIF _ TYPE _ MLNX _ DIRECT , dev _ name ,", "run _ as _ root = True )", "except processutils . ProcessExecutionError :", "LOG . exception ( _ ( `` Failed while plugging vif `` ) , instance = instance )", "elif vif _ type = = network _ model . VIF _ TYPE _ MLNX _ DIRECT :", "self . plug _ mlnx _ direct ( instance , vif )", "def unplug _ mlnx _ direct ( self , instance , vif ) :", "super ( LibvirtGenericVIFDriver ,", "self ) . unplug ( instance , vif )", "network = vif [ ' network ' ]", "vnic _ mac = vif [ ' address ' ]", "fabric = network [ ' meta ' ] [ ' physical _ network ' ]", "try :", "utils . execute ( ' ebrctl ' , ' del - port ' , fabric ,", "vnic _ mac , run _ as _ root = True )", "except processutils . ProcessExecutionError :", "LOG . exception ( _ ( `` Failed while unplugging vif `` ) , instance = instance )", "elif vif _ type = = network _ model . VIF _ TYPE _ MLNX _ DIRECT :", "self . unplug _ mlnx _ direct ( instance , vif )", ],"removed_code":[]},],[{"added_code":["instance = instance _ obj . Instance . _ from _ db _ object (", "context , instance _ obj . Instance ( ) , instance )", "connect _ info = self . driver . get _ vnc _ console ( context , instance )", "instance = instance _ obj . Instance . _ from _ db _ object (", "ctxt , instance _ obj . Instance ( ) , instance )", "console _ info = self . driver . get _ vnc _ console ( ctxt , instance )", ],"removed_code":["connect _ info = self . driver . get _ vnc _ console ( instance )", "instance = instance _ obj . Instance . _ from _ db _ object (", "ctxt , instance _ obj . Instance ( ) , instance )", "console _ info = self . driver . get _ vnc _ console ( instance )", ]},{"added_code":["instance = self . _ create _ fake _ instance _ obj ( )", "self . compute . run _ instance ( self . context ,", "jsonutils . to _ primitive ( instance ) , { } , { } , [ ] , None ,", "None , True , None , False )", "self . compute . terminate _ instance ( self . context , instance , [ ] , [ ] )", "instance = self . _ create _ fake _ instance _ obj ( )", "self . compute . run _ instance ( self . context ,", "jsonutils . to _ primitive ( instance ) , { } , { } , [ ] , None ,", "None , True , None , False )", "self . compute . terminate _ instance ( self . context , instance , [ ] , [ ] )", "instance = self . _ create _ fake _ instance _ obj ( )", "self . compute . run _ instance ( self . context ,", "jsonutils . to _ primitive ( instance ) , { } , { } , [ ] , None ,", "None , True , None , False )", "self . compute . terminate _ instance ( self . context , instance , [ ] , [ ] )", "instance = self . _ create _ fake _ instance _ obj ( )", "self . compute . run _ instance ( self . context ,", "jsonutils . to _ primitive ( instance ) , { } , { } , [ ] , None ,", "None , True , None , False )", "self . compute . terminate _ instance ( self . context , instance , [ ] , [ ] )", "instance = self . _ create _ fake _ instance _ obj (", ],"removed_code":["instance = jsonutils . to _ primitive ( self . _ create _ fake _ instance ( ) )", "self . compute . run _ instance ( self . context , instance , { } , { } , [ ] , None ,", "None , True , None , False )", "self . compute . terminate _ instance ( self . context ,", "self . _ objectify ( instance ) , [ ] , [ ] )", "instance = jsonutils . to _ primitive ( self . _ create _ fake _ instance ( ) )", "self . compute . run _ instance ( self . context , instance , { } , { } , [ ] , None ,", "None , True , None , False )", "self . compute . terminate _ instance ( self . context ,", "self . _ objectify ( instance ) , [ ] , [ ] )", "instance = jsonutils . to _ primitive ( self . _ create _ fake _ instance ( ) )", "self . compute . run _ instance ( self . context , instance , { } , { } , [ ] , None ,", "None , True , None , False )", "self . compute . terminate _ instance ( self . context ,", "self . _ objectify ( instance ) , [ ] , [ ] )", "instance = jsonutils . to _ primitive ( self . _ create _ fake _ instance ( ) )", "self . compute . run _ instance ( self . context , instance , { } , { } , [ ] , None ,", "None , True , None , False )", "self . compute . terminate _ instance ( self . context ,", "self . _ objectify ( instance ) , [ ] , [ ] )", "instance = self . _ create _ fake _ instance (", "instance = jsonutils . to _ primitive ( instance )", ]},{"added_code":["from nova . openstack . common import jsonutils", "def _ get _ running _ instance ( self , obj = False ) :", "instance _ ref = utils . get _ test _ instance ( obj = obj )", "self . connection . spawn ( self . ctxt , jsonutils . to _ primitive ( instance _ ref ) ,", "image _ info , [ ] , ' herp ' , network _ info = network _ info )", ],"removed_code":["def _ get _ running _ instance ( self ) :", "instance _ ref = utils . get _ test _ instance ( )", "self . connection . spawn ( self . ctxt , instance _ ref , image _ info ,", "[ ] , ' herp ' , network _ info = network _ info )", ]},{"added_code":["instance = self . create _ instance _ obj ( self . context )", "if instance _ name = = instance [ ' name ' ] :", "vnc _ dict = conn . get _ vnc _ console ( self . context , instance )", "instance = self . create _ instance _ obj ( self . context )", "if instance _ name = = instance [ ' name ' ] :", "conn . get _ vnc _ console , self . context , instance )", ],"removed_code":["instance _ ref = db . instance _ create ( self . context , self . test _ instance )", "if instance _ name = = instance _ ref [ ' name ' ] :", "vnc _ dict = conn . get _ vnc _ console ( instance _ ref )", "instance _ ref = db . instance _ create ( self . context , self . test _ instance )", "if instance _ name = = instance _ ref [ ' name ' ] :", "conn . get _ vnc _ console , instance _ ref )", ]},{"added_code":["def _ get _ running _ instance ( self , obj = False ) :", "instance _ ref = test _ utils . get _ test _ instance ( obj = obj )", "instance , network _ info = self . _ get _ running _ instance ( obj = True )", "vnc _ console = self . connection . get _ vnc _ console ( self . ctxt , instance )", ],"removed_code":["def _ get _ running _ instance ( self ) :", "instance _ ref = test _ utils . get _ test _ instance ( )", "instance _ ref , network _ info = self . _ get _ running _ instance ( )", "vnc _ console = self . connection . get _ vnc _ console ( instance _ ref )", ]},{"added_code":["self . context ,", "vnc _ dict = self . conn . get _ vnc _ console ( self . context , self . instance )", ],"removed_code":["vnc _ dict = self . conn . get _ vnc _ console ( self . instance )", ]},{"added_code":["from nova . objects import instance as instance _ obj", "instance = self . _ create _ instance ( obj = True )", "console = conn . get _ vnc _ console ( self . context , instance )", "instance = self . _ create _ instance ( obj = True )", "console = conn . get _ vnc _ console ( self . context , instance )", "instance = self . _ create _ instance ( obj = True , spawn = False )", "instance . vm _ state = ' building '", "conn . get _ vnc _ console , self . context , instance )", "instance = self . _ create _ instance ( obj = True , spawn = False )", "instance . vm _ state = ' rescued '", "conn . get _ vnc _ console , self . context , instance )", "def _ create _ instance ( self , instance _ id = 1 , spawn = True , obj = False , * * attrs ) :", "instance _ values . update ( attrs )", "if obj :", "instance = instance _ obj . Instance . _ from _ db _ object (", "self . context , instance _ obj . Instance ( ) , instance ,", "expected _ attrs = instance _ obj . INSTANCE _ DEFAULT _ FIELDS )", ],"removed_code":["instance = self . _ create _ instance ( )", "console = conn . get _ vnc _ console ( instance )", "instance = self . _ create _ instance ( )", "console = conn . get _ vnc _ console ( instance )", "instance = { }", "# set instance name and state", "instance [ ' name ' ] = ' fake - instance '", "instance [ ' uuid ' ] = ' 00000000 - 0000 - 0000 - 0000 - 000000000000 '", "instance [ ' vm _ state ' ] = ' building '", "conn . get _ vnc _ console , instance )", "instance = { }", "instance [ ' name ' ] = ' fake - rescue '", "instance [ ' uuid ' ] = ' 00000000 - 0000 - 0000 - 0000 - 000000000001 '", "instance [ ' vm _ state ' ] = ' rescued '", "conn . get _ vnc _ console , instance )", "def _ create _ instance ( self , instance _ id = 1 , spawn = True ) :", ]},{"added_code":["def get _ vnc _ console ( self , context , instance ) :", "`` `` `` Get connection info for a vnc console .", ": param context : security context", ": param instance : nova . objects . instance . Instance", "`` `` ``", ],"removed_code":["def get _ vnc _ console ( self , instance ) :", "# TODO ( Vek ) : Need to pass context in for access to auth _ token", ]},{"added_code":["def get _ vnc _ console ( self , context , instance ) :", ],"removed_code":["def get _ vnc _ console ( self , instance ) :", ]},{"added_code":["def get _ vnc _ console ( self , context , instance ) :", "port = get _ vnc _ port _ for _ instance ( instance . name )", ],"removed_code":["def get _ vnc _ console ( self , instance ) :", "port = get _ vnc _ port _ for _ instance ( instance [ ' name ' ] )", ]},{"added_code":["def get _ vnc _ console ( self , context , instance ) :", "def get _ vnc _ console ( self , context , instance ) :", ],"removed_code":["def get _ vnc _ console ( self , instance ) :", "def get _ vnc _ console ( self , instance ) :", ]},{"added_code":["def get _ vnc _ console ( self , context , instance ) :", ],"removed_code":["def get _ vnc _ console ( self , instance ) :", ]},{"added_code":["if instance . vm _ state = = vm _ states . RESCUED :", "name = ' % s - rescue ' % instance . name", "raise exception . InstanceNotReady ( instance _ id = instance . uuid )", "vm _ ref = vm _ utils . lookup ( self . _ session , instance . name )", "raise exception . InstanceNotFound ( instance _ id = instance . uuid )", ],"removed_code":["if instance [ ' vm _ state ' ] = = vm _ states . RESCUED :", "name = ' % s - rescue ' % instance [ ' name ' ]", "raise exception . InstanceNotReady ( instance _ id = instance [ ' uuid ' ] )", "vm _ ref = vm _ utils . lookup ( self . _ session , instance [ ' name ' ] )", "raise exception . InstanceNotFound ( instance _ id = instance [ ' uuid ' ] )", ]},],[{"added_code":["if wwn = = fc [ ' wwn ' ] :", ],"removed_code":["if wwn = = fc [ ' WWN ' ] :", ]},],]